<<<<<<< HEAD
{"version":3,"file":"index.js","mappings":"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","sources":["webpack://coaching-management-app/./src/config/config.js","webpack://coaching-management-app/./src/config/db.config.js","webpack://coaching-management-app/./src/config/logger.config.js","webpack://coaching-management-app/./src/controllers/adminController.js","webpack://coaching-management-app/./src/controllers/categoryController.js","webpack://coaching-management-app/./src/controllers/classScheduleController.js","webpack://coaching-management-app/./src/controllers/courseController.js","webpack://coaching-management-app/./src/controllers/coursePurchaseController.js","webpack://coaching-management-app/./src/controllers/dashboard.js","webpack://coaching-management-app/./src/controllers/teacherController.js","webpack://coaching-management-app/./src/controllers/userController.js","webpack://coaching-management-app/./src/errors/base.error.js","webpack://coaching-management-app/./src/middlewares/auth.js","webpack://coaching-management-app/./src/models/adminModel.js","webpack://coaching-management-app/./src/models/bannerImageModel.js","webpack://coaching-management-app/./src/models/categoryModel.js","webpack://coaching-management-app/./src/models/classScheduleModel.js","webpack://coaching-management-app/./src/models/courseModel.js","webpack://coaching-management-app/./src/models/coursePurchaseModel.js","webpack://coaching-management-app/./src/models/deleteUserModel.js","webpack://coaching-management-app/./src/models/teacherModel.js","webpack://coaching-management-app/./src/models/userModel.js","webpack://coaching-management-app/./src/routes/v1/adminRoutes.js","webpack://coaching-management-app/./src/routes/v1/categoryRoutes.js","webpack://coaching-management-app/./src/routes/v1/courseRoutes.js","webpack://coaching-management-app/./src/routes/v1/dashboardRoutes.js","webpack://coaching-management-app/./src/routes/v1/purchaseRoutes.js","webpack://coaching-management-app/./src/routes/v1/scheduleRoutes.js","webpack://coaching-management-app/./src/routes/v1/teacherRoutes.js","webpack://coaching-management-app/./src/routes/v1/userRoutes.js","webpack://coaching-management-app/./src/uitls/errorHandler.js","webpack://coaching-management-app/./src/uitls/utils.js","webpack://coaching-management-app/external commonjs \"bcrypt\"","webpack://coaching-management-app/external commonjs \"body-parser\"","webpack://coaching-management-app/external commonjs \"compression\"","webpack://coaching-management-app/external commonjs \"cors\"","webpack://coaching-management-app/external commonjs \"dotenv\"","webpack://coaching-management-app/external commonjs \"express\"","webpack://coaching-management-app/external commonjs \"express-fileupload\"","webpack://coaching-management-app/external commonjs \"express-mongo-sanitize\"","webpack://coaching-management-app/external commonjs \"helmet\"","webpack://coaching-management-app/external commonjs \"hpp\"","webpack://coaching-management-app/external commonjs \"http-status-codes\"","webpack://coaching-management-app/external commonjs \"jsonwebtoken\"","webpack://coaching-management-app/external commonjs \"mongoose\"","webpack://coaching-management-app/external commonjs \"uuid\"","webpack://coaching-management-app/external commonjs \"winston\"","webpack://coaching-management-app/external commonjs \"winston-mongodb\"","webpack://coaching-management-app/external node-commonjs \"fs\"","webpack://coaching-management-app/external node-commonjs \"os\"","webpack://coaching-management-app/external node-commonjs \"path\"","webpack://coaching-management-app/webpack/bootstrap","webpack://coaching-management-app/./index.js"],"sourcesContent":["const dotenv = require('dotenv');\r\n\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    logDbUrl: process.env.LOG_DB_URL,\r\n    tokenSecretKey: process.env.JWT_SECRET,\r\n    port: process.env.PORT,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY\r\n};","const mongoose = require('mongoose');\r\nconst { mongoDbUrl } = require('./config');\r\n\r\nconst options = {\r\n  maxPoolSize: 4, // Adjust the pool size as needed\r\n};\r\n\r\nmongoose.connect(mongoDbUrl, options);\r\n\r\nconst connectToDatabase = mongoose.connection;\r\nconnectToDatabase.on('error', console.error.bind(console, 'connection error:'));\r\nconnectToDatabase.once('open', () => {\r\n  console.log('Databse connected');\r\n});\r\n\r\nmodule.exports = connectToDatabase;\r\n","const winston = require('winston');\r\nrequire('winston-mongodb');\r\n// const { mongoDbUrl } = require('./config');\r\n\r\nconst allowedTransports = [];\r\n\r\n// // The below transport config enables logging on the console\r\n// allowedTransports.push(new winston.transports.Console({\r\n//     format: winston.format.combine(\r\n//         winston.format.colorize(),\r\n//         winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss'}),\r\n//         winston.format.printf((log) => `${log.timestamp} [${log.level}]: [${log.message}] ${log.meta ? JSON.stringify(log.meta) : ''}`)\r\n//     )\r\n// }));\r\n\r\n// MongoDB transport\r\n// allowedTransports.push(new winston.transports.MongoDB({\r\n//     level: 'error',\r\n//     db: mongoDbUrl,\r\n//     collection: 'logs',\r\n//     format: winston.format.combine(\r\n//         winston.format.timestamp(),\r\n//         winston.format.json(),\r\n//         winston.format((info) => {\r\n//             info.meta = info.meta || {};\r\n//             return info;\r\n//         })()\r\n//     ),\r\n//     options: {\r\n//         useUnifiedTopology: true\r\n//     }\r\n// }));\r\n\r\n// The below transport config enables logging in a file\r\nallowedTransports.push(new winston.transports.File({\r\n    filename: 'app.log'\r\n}));\r\n\r\nconst logger = winston.createLogger({\r\n    format: winston.format.combine(\r\n        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n        winston.format.printf((log) => `${log.timestamp} [${log.level.toUpperCase()}]: ${log.message} ${log.meta? JSON.stringify(log.meta) : ''}`)\r\n    ),\r\n    transports: allowedTransports,\r\n    defaultMeta: { service: 'user-service' }\r\n});\r\n\r\n\r\nmodule.exports = logger;","const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port, tokenSecretKey } = require(\"../config/config\");\r\nconst userModel = require(\"../models/userModel\");\r\n\r\n// ADD ADMIN\r\nconst createAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, password, mobile } = req.body;\r\n\r\n        if (!name || !email || !password || !mobile) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { profilePic } = req.files;\r\n\r\n        if (!profilePic) {\r\n            return res.status(400).send({ status: false, message: \"No profile pic uploaded\" });\r\n        };\r\n\r\n        let hashedPassward = await bcrypt.hash(password, 10);\r\n        password = hashedPassward;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let profilePicPath = \"/adminImages/\";\r\n        let profilePicName = uuid.v4() + \".\" + profilePic.name.split(\".\").pop();\r\n        let profilePicFullPath = `http://${currentIpAddress}:${port}${profilePicPath}`;\r\n\r\n        let picSavingPath = path.join(__dirname, \"..\", \"..\", \"adminImages\", profilePicName);\r\n\r\n        profilePic.mv(picSavingPath, (err) => {\r\n            if (err) {\r\n                console.log(err);\r\n            }\r\n        });\r\n\r\n        picObj = {\r\n            picName: profilePicName,\r\n            picPath: profilePicFullPath,\r\n        };\r\n\r\n        let adminObj = {\r\n            adminId: generateRandomAlphaNumericID(26),\r\n            sessionToken: generateRandomAlphaNumericID(51),\r\n            name,\r\n            email,\r\n            password,\r\n            mobile,\r\n            profilePic: picObj,\r\n        };\r\n\r\n        let newAdmin = await adminModel.create(adminObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Admin created\",\r\n            data: newAdmin,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADMIN LOGIN\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n\r\n        if (!email || !password) {\r\n            return res.status(400).send({ status: false, message: \"Email and password are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ email });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        bcrypt.compare(password, admin.password, function (err, result) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        async function hasAccess(result) {\r\n            if (result) {\r\n                let data = {};\r\n                let date = Date.now();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: admin.email,\r\n                        adminId: admin._id.toString(),\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                (data._id = admin._id.toString()), (data.email = email);\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n                admin.sessionToken = generateRandomAlphaNumericID(51);\r\n\r\n                await admin.save();\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Successfully login\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nconst getAllBookingsOfUser = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, userId } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let user = await userModel.findOne({ userId });\r\n\r\n            if (!user) {\r\n                return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n            }\r\n\r\n            let userAllBookings = await bookingModel.find({ userId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: userAllBookings,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE DAY REQUESTS\r\nconst getOneDayBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let date;\r\n            if (req.params.date) {\r\n                date = req.params.date;\r\n            } else {\r\n                let today = new Date(); // Use today's date if no date is provided\r\n                const year = today.getFullYear();\r\n                const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(today.getDate()).padStart(2, \"0\");\r\n\r\n                date = `${year}-${month}-${day}`;\r\n            }\r\n\r\n            let oneDayBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n            let grandTotal = 0;\r\n            for (let booking of oneDayBookings) {\r\n                grandTotal += booking.grand_total;\r\n            };\r\n\r\n            let data = {\r\n                totalBookings: oneDayBookings,\r\n                oneDayRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE WEEK REQUESTS\r\nconst getOneWeekBookings = async (req, res) => {\r\n    try {\r\n        let { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let startDate;\r\n            let endDate;\r\n\r\n            if (req.params.startDate && req.params.endDate) {\r\n                startDate = req.params.startDate;\r\n                endDate = req.params.endDate;\r\n            } else {\r\n                const date = new Date();\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n                endDate = `${year}-${month}-${day}`;\r\n\r\n                const oneWeekAgo = new Date(date.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                const startYear = oneWeekAgo.getFullYear();\r\n                const startMonth = String(oneWeekAgo.getMonth() + 1).padStart(2, '0');\r\n                const startDay = String(oneWeekAgo.getDate()).padStart(2, '0');\r\n\r\n                startDate = `${startYear}-${startMonth}-${startDay}`;\r\n            };\r\n\r\n            let oneWeekBookings = await bookingModel.find({\r\n                BookingDate: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneWeekBookings.length) {\r\n                for (let booking of oneWeekBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneWeekBookings: oneWeekBookings,\r\n                grandTotal: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE MONTH REVENUE AND REQUESTS (ADMIN API)\r\nconst getOneMonthBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, month, year } = req.params;\r\n\r\n        if (!adminId || !sessionToken || !month || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-${month}-01`; // Month is zero-based index\r\n            const endDate = `${year}-${month}-31`;\r\n\r\n            const oneMonthBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n\r\n            if (oneMonthBookings.length) {\r\n                for (let booking of oneMonthBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneMonthBookings: oneMonthBookings,\r\n                oneMonthRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE YEAR REQUESTS AND REVENUE (ADMIN API);\r\nconst getOneYearBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, year } = req.params;\r\n        if (!adminId || !sessionToken || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-01-01`; // January 1st of the provided year\r\n            const endDate = `${year}-12-31`; // December 31st of the provided year\r\n\r\n            let oneYearBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneYearBookings.length) {\r\n                for (let booking of oneYearBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneYearRequests: oneYearBookings,\r\n                oneYearRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createAdmin,\r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require(\"../config/logger.config\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description } = req.body;\r\n\r\n        if (!name || !description) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n        // let { category_image } = req.files;\r\n\r\n        let categoryImgFolder = path.join(__dirname, \"..\", \"..\", \"categoryImages\");\r\n\r\n        if (!fs.existsSync(categoryImgFolder)) {\r\n            fs.mkdirSync(categoryImgFolder);\r\n        }\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/categoryImages/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n        // category_image.mv(imgSavingPath, (err) => {\r\n        //     if (err) throw err;\r\n        // });\r\n\r\n        let imgObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgFullUrl,\r\n        };\r\n\r\n        let categoryObj = {\r\n            name,\r\n            description,\r\n            category_image: imgObj,\r\n        };\r\n\r\n        let newCategory = await categoryModel.create(categoryObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category Added\",\r\n            data: newCategory,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET CATEGORY BY CATEGORY ID\r\nconst getCategoryById = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        let category;\r\n        if (categoryId) {\r\n            if (!isValidObjectId(categoryId)) {\r\n                return res.status(400).send({ status: false, message: \"Invalid category Id\"});\r\n            }\r\n            category = await categoryModel.findById(categoryId);\r\n        };\r\n\r\n        if (!category) {\r\n            return res.status(200).send({ status: true, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let allProducts = await productModel.find({ category: category._id });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: category,\r\n            products: allProducts,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getCategoryById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET CATEGORY BY SERVICE SEARCH {allProductSearchByKeywords}\r\nconst getProductByKeywords  = async (req, res) => {\r\n    try {\r\n        let { service_search } = req.body;\r\n        if (!service_search) {\r\n            return res.status(400).send({ status: false, message: \"Search parameter is required\"});\r\n        };\r\n\r\n        let filter = {\r\n            $or: [\r\n            { name: { $regex: service_search, $options: \"i\" } },\r\n            { subTitle: { $regex: service_search, $options: \"i\" } }, \r\n            { description: { $regex: service_search, $options: \"i\" } }\r\n            ],\r\n        };\r\n\r\n        let products = await productModel.find(filter);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            products: products,\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getProductByKeywords API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let allCategories = await categoryModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCategories,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllCategories API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// UPDATE CATEGORY BY CATEGORY ID\r\nconst updateCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"Category Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Category Id\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            category.name = reqBody.name;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            category.description = reqBody.description;\r\n        };\r\n\r\n        if (\"FileUpload\" in reqBody) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            // console.log(\"reqbody: \", reqBody);\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/categoryImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n            let oldImgName = category.category_image.fileName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", oldImgName);\r\n            \r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let newImgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            category.category_image = newImgObj;\r\n        };\r\n\r\n        await category.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category updated successfully\",\r\n            data: category,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE CATEGORY\r\nconst deleteCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n        \r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"CategoryId is required\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"No category found with this category Id\"})\r\n        };\r\n\r\n        await categoryModel.deleteOne({ _id: categoryId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addCategory,\r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n","const logger = require('../config/logger.config');\r\nconst classScheduleModel = require('../models/classScheduleModel');\r\nconst courseModel = require('../models/courseModel');\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst uuid = require('uuid');\r\n\r\nconst { isValidObjectId } = require('mongoose');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nlet { port, adminSecretKey } = require('../config/config');\r\n\r\n\r\n// CREATE CLASS SCHEDULE\r\nconst createClassSchedule = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Key is required'\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        const {\r\n            courseId,\r\n            course_name,\r\n            meeting_link,\r\n            teacherId,\r\n            techer_name,\r\n            input_text,\r\n            youtube_video_code,\r\n            status\r\n        } = req.body;\r\n\r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let classPdfFolder = path.join(__dirname, \"..\", \"..\", \"class_pdf\");\r\n\r\n            if (!fs.existsSync(classPdfFolder)) {\r\n                fs.mkdirSync(classPdfFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/class_pdf/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        };\r\n\r\n        const classData = {\r\n            courseId,\r\n            course_name,\r\n            meeting_link,\r\n            teacherId,\r\n            techer_name,\r\n            input_text,\r\n            pdf_upload_file: imgObj,\r\n            youtube_video_code,\r\n            status\r\n        };\r\n\r\n        let newSchedule = await classScheduleModel.create(classData);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Class schedule created successfully\",\r\n            data: newSchedule\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in createClassSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CLASS SCHEDULE\r\nconst getAllClassSchedule = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Key is required'\r\n            })\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        const allClassSchedules = await classScheduleModel.find({});\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Class schedule created successfully\",\r\n            data: allClassSchedules\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllClassSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET CLASS SCHEDULE BY COURSE ID\r\nconst getSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId and key are required\" \r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let classSchedule = await classScheduleModel.findById(courseId);\r\n\r\n        if (!classSchedule) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: classSchedule\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE CLASS SCHEDULE\r\nconst updateSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({\r\n                status: false, \r\n                message: \"CourseId and key are required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let s = await classScheduleModel.findById(courseId);\r\n\r\n        if (!s) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        const e = req.body;\r\n\r\n        if (\"course_name\" in e) {\r\n            s.course_name = e.course_name;\r\n        }\r\n\r\n        if (\"meeting_link\" in e) {\r\n            s.meeting_link = e.meeting_link;\r\n        };\r\n\r\n        if (\"techer_name\" in e) {\r\n            s.techer_name = e.techer_name;\r\n        };\r\n\r\n        if (\"input_text\" in e) {\r\n            s.input_text = e.input_text;\r\n        };\r\n\r\n        if (\"youtube_video_code\" in e) {\r\n            s.youtube_video_code = e.youtube_video_code\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            s.status= e.status\r\n        };\r\n\r\n        if (\"FileUpload\" in req.body ) {\r\n\r\n            let oldImgName = s.pdf_upload_file.fileName;\r\n\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/class_pdf/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            s.pdf_upload_file = imgObj;\r\n        }\r\n\r\n        await s.save();\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Schedule updated successfully\",\r\n            data: s\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE SCHEDULE\r\nconst deleteSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let s = await classScheduleModel.findById(courseId);\r\n\r\n        if (!s) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        let pdf_file_name = s.pdf_upload_file.fileName;\r\n        if (pdf_file_name) {\r\n            let pdf_file_path = path.join(__dirname, \"..\", \"..\", \"class_pdf\", pdf_file_name);\r\n            if (fs.existsSync(pdf_file_path)) {\r\n                fs.unlinkSync(pdf_file_path);\r\n            }\r\n        };\r\n\r\n        let deleteSchedule = await classScheduleModel.deleteOne({ courseId });\r\n\r\n        if (!deleteSchedule) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Schedule not found or alrady deleted\"\r\n            })\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Schedule deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    createClassSchedule,\r\n    getAllClassSchedule,\r\n    getSchedule,\r\n    updateSchedule,\r\n    deleteSchedule\r\n};","const courseModel = require(\"../models/courseModel\");\r\nconst classScheduleModel = require('../models/classScheduleModel');\r\nconst coursePurchaseModel = require('../models/coursePurchaseModel');\r\nconst userModel = require(\"../models/userModel\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst uuid = require(\"uuid\");\r\nconst logger = require(\"../config/logger.config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nlet { port, adminSecretKey } = require(\"../config/config\");\r\n\r\n// ADD COURSE\r\nconst addCourse = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        const { categoryId, category_name, course_name, description, course_fee, duration, start_date, end_date, class_time, course_seat_limit, offer_in_amount, course_type } = req.body;\r\n\r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n            // let { course_image } = req.files;\r\n\r\n            let courseImgFolder = path.join(__dirname, \"..\", \"..\", \"courseImages\");\r\n\r\n            if (!fs.existsSync(courseImgFolder)) {\r\n                fs.mkdirSync(courseImgFolder);\r\n            }\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/courseImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n            // course_image.mv(imgSavingPath, (err) => {\r\n            //     if (err) throw err;\r\n            // });\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        }\r\n\r\n        let courseData = {\r\n            categoryId,\r\n            category_name,\r\n            course_name,\r\n            description,\r\n            course_fee,\r\n            duration,\r\n            start_date,\r\n            end_date,\r\n            class_time,\r\n            course_seat_limit,\r\n            offer_in_amount,\r\n            course_type,\r\n            course_image: imgObj,\r\n        };\r\n\r\n        let newCourse = await courseModel.create(courseData);\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Course created successfully\",\r\n            data: newCourse,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL COURSES\r\nconst getAllCourses = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        let allCourses = await courseModel.find({});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCourses,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET A COURSE BY COURSE ID\r\nconst getCourseById = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"CourseId is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid courseId\",\r\n            });\r\n        }\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        }\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: c,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getCourseById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE COURSE BY COURSE ID\r\nconst updateCourse = async (req, res) => {\r\n    try {\r\n        const { key, courseId } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"CourseId is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid courseId\",\r\n            });\r\n        }\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        }\r\n\r\n        let e = req.body;\r\n\r\n        if (\"category_name\" in e) {\r\n            c.category_name = e.category_name;\r\n        }\r\n\r\n        if (\"course_name\" in e) {\r\n            c.course_name = e.course_name;\r\n        }\r\n\r\n        if (\"description\" in e) {\r\n            c.description = e.description;\r\n        }\r\n\r\n        if (\"course_fee\" in e) {\r\n            c.course_fee = e.course_fee;\r\n        }\r\n\r\n        if (\"duration\" in e) {\r\n            c.duration = e.duration;\r\n        }\r\n\r\n        if (\"start_date\" in e) {\r\n            c.start_date = e.start_date;\r\n        }\r\n\r\n        if (\"end_date\" in e) {\r\n            c.end_date = e.end_date;\r\n        }\r\n\r\n        if (\"class_time\" in e) {\r\n            c.class_time = e.class_time;\r\n        }\r\n\r\n        if (\"course_seat_limit\" in e) {\r\n            c.course_seat_limit = e.course_seat_limit;\r\n        }\r\n\r\n        if (\"offer_in_amount\" in e) {\r\n            c.offer_in_amount = e.offer_in_amount;\r\n        }\r\n\r\n        if (\"course_type\" in e) {\r\n            c.course_type = e.course_type;\r\n        }\r\n\r\n        if (\"FileUpload\" in req.body) {\r\n            let oldImgName = c.course_image.fileName;\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            }\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/courseImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            c.course_image = imgObj;\r\n        }\r\n\r\n        await c.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Course updated successfully\",\r\n            data: c,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CLASSES OF A COURSE\r\nconst getAllClassesOfMyCourse = async (req, res) => {\r\n    try {\r\n        const { userId, courseId } = req.params;\r\n\r\n        if (!userId || !courseId ) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\",\r\n            });\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        let course = await courseModel.findById(courseId);\r\n\r\n        if (!course) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        };\r\n\r\n        let myPurchasedCourse = await coursePurchaseModel.findOne({ userId, courseId });\r\n\r\n        let myPurchasedCourseClasses = await classScheduleModel.find({ courseId: myPurchasedCourse.courseId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"success\",\r\n            data: myPurchasedCourseClasses,\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n// DELETE COURSE BY COURSE ID\r\nconst deleteCourse = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"CourseId and key are required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid courseId\",\r\n            });\r\n        }\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        }\r\n\r\n        let oldImgName = c.course_image.fileName;\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", oldImgName);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            }\r\n        }\r\n\r\n        await courseModel.deleteOne({ _id: courseId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: 'Course deleted successfully'\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addCourse,\r\n    getAllCourses,\r\n    getCourseById,\r\n    updateCourse,\r\n    deleteCourse,\r\n    getAllClassesOfMyCourse\r\n};\r\n","const coursePurchaseModel = require('../models/coursePurchaseModel');\r\nconst userModel = require('../models/userModel');\r\nconst courseModel = require('../models/courseModel');\r\nconst logger = require('../config/logger.config');\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// PURCHASE A COURSE\r\nconst purchaseCourse = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'key is required'\r\n            })\r\n        };\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(400).send({\r\n        //         status: false,\r\n        //         message: 'Not Authorized'\r\n        //     });\r\n        // };\r\n\r\n        let { courseId, amount, status, notes } = req.body;\r\n\r\n        // let user = await userModel.findById(userId);\r\n\r\n        // if (!user) {\r\n        //     return res.status(400).send({\r\n        //         status: false,\r\n        //         message: 'user not found'\r\n        //     });\r\n        // };\r\n\r\n        let purchaseData = {\r\n            courseId,\r\n            amount, \r\n            status, \r\n            userId,\r\n            notes\r\n        };\r\n        let newCouusePurchase = await coursePurchaseModel.create(purchaseData);\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Course purchased successfully\",\r\n            data: newCouusePurchase\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in purchaseCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET A PURCHASED COURSE BY ID\r\nconst getPurchasedCourse = async (req, res) => {\r\n    try {\r\n        const { key, purchaseId } = req.params;\r\n\r\n        if (!key || !purchaseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId and key is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        let purchasedCourse = await coursePurchaseModel.findById(purchaseId);\r\n\r\n        if (!purchasedCourse) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Purchased course not found\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: purchasedCourse\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getPurchasedCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL PURCHASED COURSES BY A STUDENT\r\nconst getMyAllPurchasedCourses = async (req, res) => {\r\n    try {\r\n        const { key, userId } = req.params;\r\n\r\n        if (!userId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"userId and key is required\"\r\n            });\r\n        };\r\n\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let allPurchasedCourses = await coursePurchaseModel.find({userId});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allPurchasedCourses\r\n        });\r\n        \r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllPurchasedCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL PURCHASED COURSES BY A STUDENT\r\nconst getAllPurchasedCourses = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let allPurchasedCourses = await coursePurchaseModel.find({});\r\n\r\n        let purchaseArr = [];\r\n        for (let purchase of allPurchasedCourses) {\r\n            let user = await userModel.findOne({ userId: purchase.userId });\r\n            let course = await courseModel.findOne({ _id: purchase.courseId });\r\n            let purchaseObj = {\r\n                purchaseDetails: purchase,\r\n                user,\r\n                course,\r\n            };\r\n\r\n            purchaseArr.push(purchaseObj);\r\n        }\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: purchaseArr\r\n        });\r\n        \r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllPurchasedCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL USER LIST THOSE PURCHASED A PARTICULAR COURSE\r\nconst getAllUsersOfACourse = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\"\r\n            });\r\n        };\r\n\r\n        let course = await courseModel.findById(courseId);\r\n\r\n        if (!course) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course Not Found\"\r\n            });\r\n        };\r\n\r\n        let allPurchasesOfACourse = await coursePurchaseModel.find({ courseId });\r\n\r\n        let userArr = [];\r\n\r\n        for (let ele of allPurchasesOfACourse) {\r\n            let user = await userModel.findOne({ userId: ele.userId });\r\n            userArr.push(user);\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            course,\r\n            users: userArr\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllUsersOfACourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\n// UPDATE A PURCHASED COURSE DETAILS\r\nconst updatePurchasedCourseDetails = async (req, res) => {\r\n    try {\r\n        const { purchaseId, key } = req.params;\r\n\r\n        if (!purchaseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId and key is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let p = await coursePurchaseModel.findById(purchaseId);\r\n\r\n        if (!p) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Purchased course not found\"\r\n            });\r\n        };\r\n\r\n        const e = req.body;\r\n\r\n        if (\"amount\" in e) {\r\n            p.amount = e.amount;\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            p.status = e.status;\r\n        };\r\n\r\n        if (\"notes\" in e) {\r\n            p.notes = e.notes;\r\n        };\r\n\r\n        await p.save();\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Details updated successfully\",\r\n            data: p\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updatePurchasedCourseDetails API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE PURCHASE DETAILS\r\nconst deletePurchaseDetails = async (req, res) => {\r\n    try {\r\n        const { purchaseId, key } = req.params;\r\n\r\n        if (!purchaseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId and key is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let deletePurchase = await coursePurchaseModel.deleteOne({ _id: purchaseId });\r\n\r\n        if (!deletePurchase) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Purchase details not found or already deleted\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Purchase details deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deletePurchaseDetails API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    purchaseCourse,\r\n    getPurchasedCourse,\r\n    getAllPurchasedCourses,\r\n    getMyAllPurchasedCourses,\r\n    getAllUsersOfACourse,\r\n    updatePurchasedCourseDetails,\r\n    deletePurchaseDetails\r\n}","const userModel = require(\"../models/userModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst coursePurchaseModel = require(\"../models/coursePurchaseModel\");\r\nconst bannerImageModel = require(\"../models/bannerImageModel\");\r\nconst courseModel = require(\"../models/courseModel\");\r\nconst { getCurrentIPAddress } = require(\"../uitls/utils\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require('../config/logger.config');\r\n\r\n// DASHBOARD API\r\nconst getDashboard = async (req, res) => {\r\n    try {\r\n        const { key, userId } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        // let categories = await categoryModel.find({});\r\n\r\n        let myAllPurchasedCourses = null;\r\n        if (userId) {\r\n            myAllPurchasedCourses = await coursePurchaseModel.find({ userId }).populate(\"courseId\");\r\n        }\r\n\r\n        let allCourses = await courseModel.find({});\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        let bannerImages;\r\n        if (bannerObj) {\r\n            bannerImages = bannerObj.bannerImages ? bannerObj.bannerImages : null;\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            bannerImages: bannerImages ? bannerImages : [],\r\n            myAllPurchasedCourses,\r\n            allCourses,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ADMIN DASHBOARD\r\nconst getAdminDashboard = async (req, res) => {\r\n    try {\r\n        let allPurchase = await coursePurchaseModel.find({});\r\n\r\n        let sale = 0;\r\n        for (let ele of allPurchase) {\r\n            sale += ele.amount;\r\n        };\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        let bannerImages;\r\n        if (bannerObj) {\r\n            bannerImages = bannerObj.bannerImages ? bannerObj.bannerImages : null;\r\n        };\r\n\r\n        let courses = await courseModel.find({}).countDocuments();\r\n        let user = await userModel.find({}).countDocuments();\r\n\r\n        let report = {\r\n            sale,\r\n            courses,\r\n            user\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            bannerImages: bannerImages ? bannerImages : [],\r\n            report\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getAdminDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BANNER IMAGES\r\nconst updateBannerImages = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        if (!bannerObj) {\r\n            bannerObj = await bannerImageModel.create({bannerImages: []});\r\n        };\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let bannerImage = req.files.bannerImage;\r\n\r\n        if (!bannerImage) {\r\n            return res.status(400).send({ status: false, message: \"No banner image uploaded\" });\r\n        }\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/bannerImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + bannerImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = bannerObj.bannerImages[index].imageName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", oldImage);\r\n\r\n            fs.unlinkSync(oldImgPath);\r\n\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let updatedBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages[index] = updatedBannerObj;\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner updated successfully\",\r\n                data: bannerImages,\r\n            });\r\n        } else {\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages.push(newBannerObj);\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner added successfully\",\r\n                data: bannerImages,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in updateBannerImages API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE BANNER IMAGE BY ID\r\nconst deleteBannerImage = async (req, res) => {\r\n    try {\r\n        let { imageId, key } = req.params;\r\n        if (!imageId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne();\r\n\r\n        if (!bannerObj) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        if (bannerObj.bannerImages.length) {\r\n            for (let i = 0; i < bannerObj.bannerImages.length; i++) {\r\n                if (imageId === bannerObj.bannerImages[i]._id.toString()) {\r\n\r\n                    let imgName = bannerObj.bannerImages[i].imageName;\r\n                    let imgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgName);\r\n\r\n                    if (fs.existsSync(imgPath)) {\r\n                        fs.unlinkSync(imgPath);\r\n                    };\r\n                    \r\n                    let arr = bannerObj.bannerImages;\r\n                    arr.splice(i, 1);\r\n                    bannerObj.bannerImages = arr;\r\n\r\n                    await bannerObj.save();\r\n                }\r\n            }\r\n        }\r\n\r\n        let bannerImages = bannerObj.bannerImages;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Banner deleted successfully\",\r\n            data: bannerImages,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in deleteBannerImage API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    getDashboard,\r\n    getAdminDashboard,\r\n    updateBannerImages,\r\n    deleteBannerImage,\r\n};\r\n","const teacherModel = require('../models/teacherModel');\r\n\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst uuid = require('uuid');\r\n\r\nconst { isValidObjectId } = require('mongoose');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nlet { port, adminSecretKey } = require('../config/config');\r\nconst logger = require('../config/logger.config');\r\n\r\n\r\n// ADD TEACHER\r\nconst addTeacher = async (req, res) => {\r\n    try {\r\n\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description } = req.body;\r\n        \r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let teacherImgFolder = path.join(__dirname, \"..\", \"..\", \"uploads\");\r\n\r\n            if (!fs.existsSync(teacherImgFolder)) {\r\n                fs.mkdirSync(teacherImgFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/uploads/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"uploads\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        }\r\n\r\n        let teacherData = {\r\n            name,\r\n            description,\r\n            profilePic: imgObj\r\n        };\r\n\r\n        let newTeacher = await teacherModel.create(teacherData);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher added successfully\",\r\n            data: newTeacher\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addTeacher API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL TEACHERS\r\nconst getAllTeachers = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let allTeachers = await teacherModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allTeachers\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllTeachers API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET TEACHER BY TEACHER ID\r\nconst getTeacherById = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n        \r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let teacher = await teacherModel.findById(teacherId);\r\n\r\n        if (!teacher) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: teacher\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getTeacherById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE TEACHER BY TEACHER ID\r\nconst updateTeacher = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let t = await teacherModel.findById(teacherId);\r\n\r\n        if (!t) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"name\" in e) {\r\n            t.name = e.name;\r\n        };\r\n\r\n        if (\"description\" in e) {\r\n            t.description = e.description;\r\n        };\r\n\r\n        if ( \"FileUpload\" in e ) {\r\n            let oldImgName = t.profilePic.fileName;\r\n\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"uploads\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let teacherImgFolder = path.join(__dirname, \"..\", \"..\", \"uploads\");\r\n\r\n            if (!fs.existsSync(teacherImgFolder)) {\r\n                fs.mkdirSync(teacherImgFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/uploads/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"uploads\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            t.profilePic = imgObj;\r\n        };\r\n\r\n        await t.save();\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher data updated successfully\",\r\n            data: t\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateTeacher API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE TEACHER BY TEACHER ID\r\nconst deleteTeacher = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n        \r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let t = await teacherModel.findById(teacherId);\r\n\r\n        if (!t) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        let oldImgName = t.profilePic.fileName;\r\n        let oldImgPath = path.join(__dirname, \"..\", \"..\", \"uploads\", oldImgName);\r\n\r\n        if (fs.existsSync(oldImgPath)) {\r\n            fs.unlinkSync(oldImgPath);\r\n        };\r\n\r\n        await teacherModel.deleteOne({_id: teacherId});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteTeacherById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addTeacher,\r\n    getAllTeachers,\r\n    getTeacherById,\r\n    updateTeacher,\r\n    deleteTeacher\r\n};","const userModel = require(\"../models/userModel\");\r\nconst adminModel = require(\"../models/adminModel\");\r\nconst deletedUserModel = require('../models/deleteUserModel');\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// LOGIN USER\r\nconst authenticateUser = async (req, res) => {\r\n    try {\r\n        let { email, profilePic, name, userId } = req.body;\r\n\r\n        const isUserExists = await userModel.findOne({ userId: userId });\r\n\r\n        if (!isUserExists) {\r\n            let userObj = {\r\n                userId,\r\n                name,\r\n                email,\r\n                profilePic\r\n            };\r\n\r\n            let newUser = await userModel.create(userObj);\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: newUser\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: isUserExists,\r\n            });\r\n        };\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// REGISTER USER\r\nconst updateUser = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            user.name = reqBody.name;\r\n        };\r\n\r\n        if (\"phone\" in reqBody) {\r\n            user.phone = reqBody.phone;\r\n        };\r\n\r\n        if (\"gender\" in reqBody) {\r\n            user.gender = reqBody.gender;\r\n        };\r\n\r\n        if (\"date_of_birth\" in reqBody) {\r\n            user.date_of_birth = reqBody.date_of_birth;\r\n        };\r\n\r\n        if (\"Address\" in reqBody) {\r\n            if (\"address\" in reqBody.Address) {\r\n                user.Address.address = reqBody.Address.address;\r\n            };\r\n\r\n            if (\"apartment\" in reqBody.Address) {\r\n                user.Address.apartment = reqBody.Address.apartment;\r\n            };\r\n\r\n            if (\"city\" in reqBody.Address) {\r\n                user.Address.city = reqBody.Address.city;\r\n            };\r\n\r\n            if (\"post_code\" in reqBody.Address) {\r\n                user.Address.post_code = reqBody.Address.post_code;\r\n            };\r\n\r\n            if (\"state\" in reqBody.Address) {\r\n                user.Address.state = reqBody.Address.state;\r\n            }\r\n        };\r\n\r\n        if (\"education\" in reqBody) {\r\n            user.education = reqBody.education;\r\n        }\r\n\r\n        await user.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User updated successfully\",\r\n            data: user,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET USER BY ID\r\nconst getUserById = async (req, res) => {\r\n    try {\r\n        let { userId, key } = req.params;\r\n\r\n        if (!userId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: user\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL USERS\r\nconst getAllUsers = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"key is required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let users = await userModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: users\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE USER\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        const { reason, feedback} = req.body;\r\n\r\n        let userAllBookings = await bookingModel.find({ userId });\r\n\r\n        let userData = {\r\n            user,\r\n            userAllBookings\r\n        };\r\n\r\n        let jsonStr = JSON.stringify(userData);\r\n\r\n        await userModel.deleteOne({ userId });\r\n\r\n        let deletedUserData = {\r\n            userId,\r\n            deletedUserData: jsonStr,\r\n            reason,\r\n            feedback,\r\n            deletedAt: new Date().toLocaleString()\r\n        };\r\n\r\n        await deletedUserModel.create(deletedUserData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n    authenticateUser,\r\n    updateUser,\r\n    deleteUser,\r\n    getUserById,\r\n    getAllUsers\r\n};\r\n","class BaseError extends Error {\r\n    constructor(name, statusCode, description, details) {\r\n        super(description);\r\n        this.name = name;\r\n        this.statusCode = statusCode;\r\n        this.details = details;\r\n    }\r\n}\r\n\r\nmodule.exports = BaseError;","const { isValidObjectId } = require('mongoose');\r\nconst { tokenSecretKey } = require('../config/config');\r\nconst adminModel = require('../models/adminModel');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers[\"authorization\"];\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Token is required\"\r\n            });\r\n        };\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid token\"\r\n            });\r\n        };\r\n\r\n        let decodedToken;\r\n\r\n        jwt.verify(token, tokenSecretKey, (err, decode) => {\r\n            if (err) {\r\n                throw err;\r\n            };\r\n\r\n            decodedToken = decode;\r\n            let loginUserId = decodedToken.adminId;\r\n            req[\"adminId\"] = loginUserId;\r\n            next();\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.adminId;\r\n        let { adminId } = req.params;\r\n\r\n        if (!isValidObjectId(adminId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid userId\"});\r\n        };\r\n\r\n        let admin = await adminModel.findById(adminId);\r\n\r\n        if (!admin){\r\n            return res.status(404).send({ status: false, message: \"Admin not found\"})\r\n        };\r\n\r\n        let AdminId = admin._id;\r\n\r\n        if ( tokenId.toString() !== AdminId.toString() ) {\r\n            return res.status(403).send({\r\n                status: false,\r\n                message: \"NOT AUTHORIZED!!!\"\r\n            })\r\n        };\r\n\r\n        next();\r\n    } catch (error) {   \r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = { Authentication, Authorization }","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst adminSchema = new mongoose.Schema({\r\n    adminId: {\r\n        type: String,\r\n    },\r\n\r\n    sessionToken: {\r\n        type: String,\r\n    },\r\n\r\n    name: {\r\n        type: String,\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    profilePic: {\r\n        picName: {\r\n            type: String,\r\n        },\r\n        picPath: {\r\n            type: String,\r\n        }\r\n    },\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Admin\", adminSchema);","const mongoose = require('mongoose');\r\n\r\nconst bannerImageSchema = new mongoose.Schema({\r\n    bannerImages: [\r\n        {\r\n            imageName: { type: String, default: \"\" },\r\n            imagePath: { type: String, default: \"\" }\r\n        }\r\n    ]\r\n}, { timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model(\"BannerImage\", bannerImageSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    category_image: {\r\n        fileName: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        filePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    cat_enum: {\r\n        type: String,\r\n        enum: [\"\", \"\"]\r\n    },\r\n    \r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Category\", categorySchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst classScheduleSchema = new mongoose.Schema({\r\n    courseId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    meeting_link: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    teacherId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    techer_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    input_text: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    pdf_upload_file: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    youtube_video_code: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Class_Schedule\", classScheduleSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst courseSchema = new mongoose.Schema({\r\n    categoryId: {\r\n        type: ObjectId,\r\n        ref: 'Category'\r\n    },\r\n\r\n    category_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_fee: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    duration: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    start_date: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    end_date: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    class_time: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_image: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    course_seat_limit: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    offer_in_amount: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    course_type: {\r\n        type: String,\r\n        default: \"\"\r\n    }\r\n}, { timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Course\", courseSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst coursePurchaseSchema = new mongoose.Schema({\r\n    \r\n    courseId: {\r\n        type: ObjectId,\r\n        ref: \"Course\"\r\n    },\r\n\r\n    userId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    amount: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    notes: {\r\n        type: String,\r\n        default: \"\"\r\n    }\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"CoursePurchase\", coursePurchaseSchema);","const mongoose = require('mongoose');\r\n\r\n\r\nconst deletedUserSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    deletedUserData: {\r\n        type: String,\r\n    },\r\n\r\n    reason: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    },\r\n\r\n    deletedAt: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"DeletedUser\", deletedUserSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst teacherSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    profilePic: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\",\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Teacher\", teacherSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        userId: {\r\n            type: String,\r\n            unique: true,\r\n            default: \"\"\r\n        },\r\n\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        profilePic: {\r\n            type: String,\r\n        },\r\n\r\n        gender: {\r\n            type: String,\r\n            enum: [\"MALE\", \"FEMALE\", \"OTHER\", \"UNDEFINED\"],\r\n            default: \"UNDEFINED\",\r\n        },\r\n\r\n        Address: {\r\n            address: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            apartment: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            city: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            post_code: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            state: {\r\n                type: String,\r\n                default: \"\"\r\n            }\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        phone: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        date_of_birth: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        education: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"User\", userSchema);\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createAdmin, \r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n} = require('../../controllers/adminController');\r\n\r\nconst { Authentication, Authorization } = require('../../middlewares/auth');\r\n\r\n// SIGNUP ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/createSuperAdmin\", createAdmin);\r\n\r\n// LOGIN ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/loginSuperAdmin\", adminLogin);\r\n\r\n// GET ONE DAY BOOKINGS (ADMIN API) // date format: 2024-05-02\r\n// router.get(\"/api/v1/getOneDayBookings/:adminId/:sessionToken/:date?\", getOneDayBookings);\r\n\r\n// GET ONE WEEK BOOKINGS (ADMIN API)\r\n// router.get(\"/api/v1/getOneWeekBookings/:adminId/:sessionToken/:startDate?/:endDate?\", getOneWeekBookings);\r\n\r\n// GET ONE MONTH BOOKINGS (ADMIN API)\r\n// router.get(\"/api/v1/getOneMonthBookings/:adminId/:sessionToken/:month/:year\", getOneMonthBookings);\r\n\r\n// GET ONE YEAR BOOKINGS (ADMIN API)\r\n// router.get(\"/api/v1/getOneYearBookings/:adminId/:sessionToken/:year\", getOneYearBookings);\r\n\r\n// GET ALL BOOKINGS OF AN USER (ADMIN API)\r\nrouter.get(\"/api/v1/getUserAllBookings/:adminId/:sessionToken/:userId\", getAllBookingsOfUser);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCategory, \r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n } = require('../../controllers/categoryController');\r\n\r\n// ADD CATEGORY\r\nrouter.post(\"/api/v1/addCategory/:key\", addCategory);\r\n\r\n// GET CATEGORY BY ID\r\nrouter.post(\"/api/v1/viewService/:categoryId\", getCategoryById);\r\n\r\n// SEARCH PRODUCTS BY KEYWORDS\r\nrouter.post(\"/api/v1/allProductSearchByKeywords\", getProductByKeywords);\r\n\r\n// GET ALL CATEGORIES\r\nrouter.get(\"/api/v1/getAllCategories/:key\", getAllCategories);\r\n\r\n// UPDATE CATEGORY\r\nrouter.put(\"/api/v1/updateCategory/:key/:categoryId\", updateCategory);\r\n\r\n// DELETE CATEGORY\r\nrouter.delete(\"/api/v1/deleteCategory/:key/:categoryId\", deleteCategory);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCourse,\r\n    getAllCourses,\r\n    updateCourse,\r\n    deleteCourse,\r\n    getCourseById,\r\n    getAllClassesOfMyCourse\r\n} = require('../../controllers/courseController');\r\n\r\n// ADD COURSE\r\nrouter.post(\"/api/v1/addCourse/:key\", addCourse);\r\n\r\n// GET COURSE BY ID\r\nrouter.get(\"/api/v1/getCourse/:key/:courseId\", getCourseById);\r\n\r\n// GET ALL COURSES\r\nrouter.get(\"/api/v1/getAllCourses/:key\", getAllCourses);\r\n\r\n// UPDATE COURSE BY COURSE ID\r\nrouter.put(\"/api/v1/updateCourse/:key/:courseId\", updateCourse);\r\n\r\n// DELETE COURSE BY COURSE ID\r\nrouter.delete(\"/api/v1/deleteCourse/:key/:courseId\", deleteCourse);\r\n\r\n// GET MY PURCHASED COURSE'S ALL CLASS SCHEDULE\r\nrouter.get(\"/api/v1/getAllClassesOfMyCourse/:userId/:courseId\", getAllClassesOfMyCourse);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getDashboard, updateBannerImages, deleteBannerImage, getAdminDashboard } = require('../../controllers/dashboard');\r\n\r\n// GET DASHBOARD\r\nrouter.get(\"/api/v1/getDashboard/:key/:userId?\", getDashboard);\r\n\r\n// GET ADMIN DASHBOARD\r\nrouter.get(\"/api/v1/getAdminDashboard/:key\", getAdminDashboard);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.put(\"/api/v1/addOrUpdateBanner/:key\", updateBannerImages);\r\n\r\n// DELETE BANNER IMAGE\r\nrouter.delete(\"/api/v1/deleteBanner/:imageId/:key\", deleteBannerImage);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    purchaseCourse,\r\n    getPurchasedCourse,\r\n    getAllPurchasedCourses,\r\n    updatePurchasedCourseDetails,\r\n    deletePurchaseDetails,\r\n    getMyAllPurchasedCourses,\r\n    getAllUsersOfACourse\r\n} = require('../../controllers/coursePurchaseController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/addPurchaseDetails/:userId\", purchaseCourse);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getPurchasedDetails/:key/:purchaseId\", getPurchasedCourse);\r\n\r\n// GET MY ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getMyAllPurchasedDetails/:key/:userId\", getMyAllPurchasedCourses);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllPurchasedDetails/:key\", getAllPurchasedCourses);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updatePurchasedDetails/:key/:purchaseId\", updatePurchasedCourseDetails);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletePurchaseDetails/:key/:purchaseId\", deletePurchaseDetails);\r\n\r\n// GET ALL USER LIST THOSE PURCHASED A PARTICULAR COURSE\r\nrouter.get(\"/api/v1/getAllUsersOfACourse/:key/:courseId\", getAllUsersOfACourse);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createClassSchedule, \r\n    getAllClassSchedule,\r\n    getSchedule,\r\n    updateSchedule,\r\n    deleteSchedule,\r\n\r\n} = require('../../controllers/classScheduleController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/createSchedule/:key\", createClassSchedule);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getSchedule/:key/:courseId\", getSchedule);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllClassSchedule/:key\", getAllClassSchedule);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updateSchedule/:key/:courseId\", updateSchedule);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletSchedule/:key/:courseId\", deleteSchedule);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addTeacher,\r\n    getAllTeachers,\r\n    getTeacherById,\r\n    updateTeacher,\r\n    deleteTeacher,\r\n\r\n} = require('../../controllers/teacherController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/addTeacher/:key\", addTeacher);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getTeacher/:key/:teacherId\", getTeacherById);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllTeachers/:key\", getAllTeachers);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updateTeacher/:key/:teacherId\", updateTeacher);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletTeacher/:key/:teacherId\", deleteTeacher);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {\r\n    authenticateUser,\r\n    updateUser,\r\n    getAllUsers,\r\n    getUserById,\r\n    deleteUser, \r\n    \r\n} = require('../../controllers/userController');\r\n\r\n// AUTHENTICATE USER\r\nrouter.post(\"/api/v1/authenticateUser\", authenticateUser);\r\n\r\n// GET USER BY ID\r\nrouter.get(\"/api/v1/getUser/:userId/:key\", getUserById);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/users/:key\", getAllUsers);\r\n\r\n// REGISTER USER\r\nrouter.post(\"/api/v1/updateUser/:userId\", updateUser);\r\n\r\n// DELETE USER BY USER ID\r\nrouter.delete(\"/api/v1/deleteUser/:userId\", deleteUser);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/getAllUsers\", getAllUsers);\r\n\r\n\r\nmodule.exports = router;","const BaseError = require('../errors/base.error');\r\nconst { StatusCodes } = require('http-status-codes');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n    if (err instanceof BaseError) {\r\n        return res.status(err.statusCode).json({\r\n            success: false,\r\n            message: err.message,\r\n            err: err.details,\r\n            data: {}\r\n        });\r\n    };\r\n\r\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n        success: false,\r\n        message: \"Something went wrong\",\r\n        err: err,\r\n        data: {}\r\n    });\r\n};\r\n\r\nmodule.exports = { errorHandler };","const os = require(\"os\");\r\n\r\n// GET CURRENT IP ADDRESS\r\nlet getCurrentIPAddress = () => {\r\n    let networkInterfaces = os.networkInterfaces();\r\n    let ipAddress = Object.values(networkInterfaces)\r\n        .flat()\r\n        .filter((iface) => iface.family === \"IPv4\" && !iface.internal)\r\n        .map((iface) => iface.address)[0];\r\n    return ipAddress;\r\n};\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n};\r\n\r\nmodule.exports = {\r\n    getCurrentIPAddress,\r\n    generateRandomAlphaNumericID,\r\n};\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"express-mongo-sanitize\");","module.exports = require(\"helmet\");","module.exports = require(\"hpp\");","module.exports = require(\"http-status-codes\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"uuid\");","module.exports = require(\"winston\");","module.exports = require(\"winston-mongodb\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require(\"cors\");\r\nconst helmet = require('helmet');\r\n// const rateLimit = require('express-rate-limit');\r\nconst compression = require('compression');\r\n// const xss = require('xss');\r\nconst mongoSanitize = require('express-mongo-sanitize');\r\nconst hpp = require('hpp');\r\n\r\n\r\nconst { port } = require('./src/config/config');\r\nconst { connectToDatabase } = require('./src/config/db.config');\r\nconst { errorHandler } = require('./src/uitls/errorHandler');\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\napp.use(cors());\r\napp.use(compression());\r\n// app.use(xss());\r\napp.use(mongoSanitize());\r\napp.use(hpp()); // HTTP Parameter Pollution prevention\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\napp.use(bodyParser.text());\r\napp.use(fileUpload());\r\napp.use(cors());\r\n\r\nconst adminRoutes = require('./src/routes/v1/adminRoutes');\r\nconst courseRoutes = require('./src/routes/v1/courseRoutes');\r\nconst userRoutes = require('./src/routes/v1/userRoutes');\r\nconst categoryRoutes = require('./src/routes/v1/categoryRoutes');\r\nconst dashboardRoutes = require(\"./src/routes/v1/dashboardRoutes\");\r\nconst purchaseRoutes = require(\"./src/routes/v1/purchaseRoutes\");\r\nconst scheduleRoutes = require('./src/routes/v1/scheduleRoutes');\r\nconst teacherRoutes = require('./src/routes/v1/teacherRoutes');\r\n\r\n// Content Security Policy\r\napp.use(\r\n    helmet.contentSecurityPolicy({\r\n        directives: {\r\n            defaultSrc: [\"'self'\"],\r\n            scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n            objectSrc: [\"'none'\"],\r\n            upgradeInsecureRequests: [],\r\n        },\r\n    })\r\n);\r\n\r\n// HTTP Strict Transport Security (HSTS)\r\napp.use(\r\n    helmet.hsts({\r\n        maxAge: 31536000, // 1 year\r\n        includeSubDomains: true,\r\n        preload: true,\r\n    })\r\n);\r\n\r\napp.use(\"/userImages\", express.static(__dirname + \"/userImages\"));\r\napp.use(\"/categoryImages\", express.static(__dirname + \"/categoryImages/\"));\r\napp.use(\"/bannerImages\", express.static(__dirname + \"/bannerImages\"));\r\napp.use(\"/courseImages\", express.static(__dirname + \"/courseImages\"));\r\napp.use(\"/class_pdf\", express.static(__dirname + \"/class_pdf\"));\r\napp.use(\"/uploads\", express.static(__dirname + \"/uploads\"));\r\n\r\n\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", courseRoutes);\r\napp.use(\"/\", userRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", purchaseRoutes);\r\napp.use(\"/\", scheduleRoutes);\r\napp.use(\"/\", teacherRoutes);\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>Coaching App is Up and Running</h1>\");\r\n});\r\n\r\n// Last middleware if any error comes\r\napp.use(errorHandler);\r\n\r\nconst server = app.listen(port, async() => {\r\n    console.log('App is running on port', port);\r\n    // logger.info('Server started on port ' + port, { meta: { timestamp: new Date().toISOString() } });\r\n    await connectToDatabase;\r\n});\r\n\r\n// Handling unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling uncaught exceptions\r\nprocess.on('uncaughtException', (err) => {\r\n    console.error('Uncaught Exception thrown:', err);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling process termination signals for graceful shutdown\r\nprocess.on('SIGTERM', () => {\r\n    console.log('SIGTERM signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n\r\nprocess.on('SIGINT', () => {\r\n    console.log('SIGINT signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n"],"names":["config","module","exports","mongoDbUrl","process","env","MONGO_DB_URL","logDbUrl","LOG_DB_URL","tokenSecretKey","JWT_SECRET","port","PORT","adminSecretKey","ADMIN_SECRET_KEY","mongoose","connect","maxPoolSize","connectToDatabase","connection","on","console","error","bind","once","log","winston","allowedTransports","push","transports","File","filename","logger","createLogger","format","combine","timestamp","printf","level","toUpperCase","message","meta","JSON","stringify","defaultMeta","service","adminModel","jwt","bcrypt","uuid","path","getCurrentIPAddress","generateRandomAlphaNumericID","userModel","createAdmin","async","req","res","name","email","password","mobile","body","status","send","profilePic","files","hash","currentIpAddress","profilePicPath","profilePicName","v4","split","pop","profilePicFullPath","picSavingPath","join","__dirname","mv","err","picObj","picName","picPath","adminObj","adminId","sessionToken","newAdmin","create","data","adminLogin","admin","findOne","compare","result","date","Date","now","issueTime","Math","floor","token","sign","_id","toString","iat","expiresIn","setHeader","save","hasAccess","getAllBookingsOfUser","userId","params","userAllBookings","bookingModel","find","categoryModel","fs","isValidObjectId","addCategory","key","description","File_Extension","File_Path","File_data","File_name","FileUpload","decodedData","Buffer","from","categoryImgFolder","existsSync","mkdirSync","imgRelativePath","imgUniqName","imgFullUrl","imgSavingPath","writeFileSync","categoryObj","category_image","fileName","filePath","newCategory","metadata","stack","details","toISOString","ip","method","url","originalUrl","getCategoryById","category","categoryId","findById","allProducts","productModel","products","getProductByKeywords","service_search","filter","$or","$regex","$options","subTitle","getAllCategories","allCategories","updateCategory","reqBody","oldImgName","oldImgPath","unlinkSync","newImgObj","deleteCategory","deleteOne","classScheduleModel","createClassSchedule","courseId","course_name","meeting_link","teacherId","techer_name","input_text","youtube_video_code","imgObj","classPdfFolder","classData","pdf_upload_file","newSchedule","getAllClassSchedule","allClassSchedules","getSchedule","classSchedule","updateSchedule","s","e","deleteSchedule","pdf_file_name","pdf_file_path","courseModel","coursePurchaseModel","addCourse","category_name","course_fee","duration","start_date","end_date","class_time","course_seat_limit","offer_in_amount","course_type","courseImgFolder","courseData","course_image","newCourse","getAllCourses","allCourses","getCourseById","c","updateCourse","deleteCourse","getAllClassesOfMyCourse","myPurchasedCourse","myPurchasedCourseClasses","purchaseCourse","amount","notes","purchaseData","newCouusePurchase","getPurchasedCourse","purchaseId","purchasedCourse","getAllPurchasedCourses","allPurchasedCourses","purchaseArr","purchase","purchaseObj","purchaseDetails","user","course","getMyAllPurchasedCourses","getAllUsersOfACourse","allPurchasesOfACourse","userArr","ele","users","updatePurchasedCourseDetails","p","deletePurchaseDetails","bannerImageModel","getDashboard","myAllPurchasedCourses","populate","bannerImages","bannerObj","getAdminDashboard","allPurchase","sale","report","courses","countDocuments","updateBannerImages","ImageModel","parsedData","parse","bannerImage","index","isNewPick","img_id","imageName","newBannerObj","imagePath","oldImage","updatedBannerObj","deleteBannerImage","imageId","length","i","imgName","imgPath","arr","splice","teacherModel","addTeacher","teacherImgFolder","teacherData","newTeacher","getAllTeachers","allTeachers","getTeacherById","teacher","updateTeacher","t","deleteTeacher","deletedUserModel","authenticateUser","isUserExists","userObj","newUser","updateUser","phone","gender","date_of_birth","Address","address","apartment","city","post_code","state","education","deleteUser","reason","feedback","userData","jsonStr","deletedUserData","deletedAt","toLocaleString","getUserById","getAllUsers","BaseError","Error","constructor","statusCode","super","this","Authentication","next","tokenWithBearer","headers","decodedToken","verify","decode","loginUserId","Authorization","tokenId","AdminId","adminSchema","Schema","Types","ObjectId","type","String","timestamps","model","bannerImageSchema","default","categorySchema","cat_enum","enum","classScheduleSchema","courseSchema","ref","Number","coursePurchaseSchema","deletedUserSchema","teacherSchema","userSchema","unique","required","trim","router","Router","post","get","put","delete","StatusCodes","errorHandler","json","success","INTERNAL_SERVER_ERROR","os","networkInterfaces","Object","values","flat","iface","family","internal","map","id","characters","random","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","express","bodyParser","fileUpload","cors","helmet","compression","mongoSanitize","hpp","app","use","limit","urlencoded","extended","text","adminRoutes","courseRoutes","userRoutes","categoryRoutes","dashboardRoutes","purchaseRoutes","scheduleRoutes","teacherRoutes","contentSecurityPolicy","directives","defaultSrc","scriptSrc","objectSrc","upgradeInsecureRequests","hsts","maxAge","includeSubDomains","preload","static","server","listen","promise","close","exit"],"sourceRoot":""}
=======
{"version":3,"file":"index.js","mappings":"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","sources":["webpack://coaching-management-app/./src/config/config.js","webpack://coaching-management-app/./src/config/db.config.js","webpack://coaching-management-app/./src/config/logger.config.js","webpack://coaching-management-app/./src/controllers/adminController.js","webpack://coaching-management-app/./src/controllers/categoryController.js","webpack://coaching-management-app/./src/controllers/classScheduleController.js","webpack://coaching-management-app/./src/controllers/courseController.js","webpack://coaching-management-app/./src/controllers/coursePurchaseController.js","webpack://coaching-management-app/./src/controllers/dashboard.js","webpack://coaching-management-app/./src/controllers/teacherController.js","webpack://coaching-management-app/./src/controllers/userController.js","webpack://coaching-management-app/./src/errors/base.error.js","webpack://coaching-management-app/./src/middlewares/auth.js","webpack://coaching-management-app/./src/models/adminModel.js","webpack://coaching-management-app/./src/models/bannerImageModel.js","webpack://coaching-management-app/./src/models/categoryModel.js","webpack://coaching-management-app/./src/models/classScheduleModel.js","webpack://coaching-management-app/./src/models/courseModel.js","webpack://coaching-management-app/./src/models/coursePurchaseModel.js","webpack://coaching-management-app/./src/models/deleteUserModel.js","webpack://coaching-management-app/./src/models/teacherModel.js","webpack://coaching-management-app/./src/models/userModel.js","webpack://coaching-management-app/./src/routes/v1/adminRoutes.js","webpack://coaching-management-app/./src/routes/v1/categoryRoutes.js","webpack://coaching-management-app/./src/routes/v1/courseRoutes.js","webpack://coaching-management-app/./src/routes/v1/dashboardRoutes.js","webpack://coaching-management-app/./src/routes/v1/purchaseRoutes.js","webpack://coaching-management-app/./src/routes/v1/scheduleRoutes.js","webpack://coaching-management-app/./src/routes/v1/teacherRoutes.js","webpack://coaching-management-app/./src/routes/v1/userRoutes.js","webpack://coaching-management-app/./src/uitls/errorHandler.js","webpack://coaching-management-app/./src/uitls/utils.js","webpack://coaching-management-app/external commonjs \"bcrypt\"","webpack://coaching-management-app/external commonjs \"body-parser\"","webpack://coaching-management-app/external commonjs \"compression\"","webpack://coaching-management-app/external commonjs \"cors\"","webpack://coaching-management-app/external commonjs \"dotenv\"","webpack://coaching-management-app/external commonjs \"express\"","webpack://coaching-management-app/external commonjs \"express-fileupload\"","webpack://coaching-management-app/external commonjs \"express-mongo-sanitize\"","webpack://coaching-management-app/external commonjs \"helmet\"","webpack://coaching-management-app/external commonjs \"hpp\"","webpack://coaching-management-app/external commonjs \"http-status-codes\"","webpack://coaching-management-app/external commonjs \"jsonwebtoken\"","webpack://coaching-management-app/external commonjs \"mongoose\"","webpack://coaching-management-app/external commonjs \"uuid\"","webpack://coaching-management-app/external commonjs \"winston\"","webpack://coaching-management-app/external commonjs \"winston-mongodb\"","webpack://coaching-management-app/external node-commonjs \"fs\"","webpack://coaching-management-app/external node-commonjs \"os\"","webpack://coaching-management-app/external node-commonjs \"path\"","webpack://coaching-management-app/webpack/bootstrap","webpack://coaching-management-app/./index.js"],"sourcesContent":["const dotenv = require('dotenv');\r\n\r\ndotenv.config();\r\n\r\nmodule.exports = {\r\n    mongoDbUrl: process.env.MONGO_DB_URL,\r\n    logDbUrl: process.env.LOG_DB_URL,\r\n    tokenSecretKey: process.env.JWT_SECRET,\r\n    port: process.env.PORT,\r\n    adminSecretKey: process.env.ADMIN_SECRET_KEY\r\n};","const mongoose = require('mongoose');\r\nconst { mongoDbUrl } = require('./config');\r\n\r\nconst options = {\r\n  maxPoolSize: 4, // Adjust the pool size as needed\r\n};\r\n\r\nmongoose.connect(mongoDbUrl, options);\r\n\r\nconst connectToDatabase = mongoose.connection;\r\nconnectToDatabase.on('error', console.error.bind(console, 'connection error:'));\r\nconnectToDatabase.once('open', () => {\r\n  console.log('Databse connected');\r\n});\r\n\r\nmodule.exports = connectToDatabase;\r\n","const winston = require('winston');\r\nrequire('winston-mongodb');\r\n// const { mongoDbUrl } = require('./config');\r\n\r\nconst allowedTransports = [];\r\n\r\n// // The below transport config enables logging on the console\r\n// allowedTransports.push(new winston.transports.Console({\r\n//     format: winston.format.combine(\r\n//         winston.format.colorize(),\r\n//         winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss'}),\r\n//         winston.format.printf((log) => `${log.timestamp} [${log.level}]: [${log.message}] ${log.meta ? JSON.stringify(log.meta) : ''}`)\r\n//     )\r\n// }));\r\n\r\n// MongoDB transport\r\n// allowedTransports.push(new winston.transports.MongoDB({\r\n//     level: 'error',\r\n//     db: mongoDbUrl,\r\n//     collection: 'logs',\r\n//     format: winston.format.combine(\r\n//         winston.format.timestamp(),\r\n//         winston.format.json(),\r\n//         winston.format((info) => {\r\n//             info.meta = info.meta || {};\r\n//             return info;\r\n//         })()\r\n//     ),\r\n//     options: {\r\n//         useUnifiedTopology: true\r\n//     }\r\n// }));\r\n\r\n// The below transport config enables logging in a file\r\nallowedTransports.push(new winston.transports.File({\r\n    filename: 'app.log'\r\n}));\r\n\r\nconst logger = winston.createLogger({\r\n    format: winston.format.combine(\r\n        winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n        winston.format.printf((log) => `${log.timestamp} [${log.level.toUpperCase()}]: ${log.message} ${log.meta? JSON.stringify(log.meta) : ''}`)\r\n    ),\r\n    transports: allowedTransports,\r\n    defaultMeta: { service: 'user-service' }\r\n});\r\n\r\n\r\nmodule.exports = logger;","const adminModel = require(\"../models/adminModel\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcrypt\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port, tokenSecretKey } = require(\"../config/config\");\r\nconst userModel = require(\"../models/userModel\");\r\n\r\n// ADD ADMIN\r\nconst createAdmin = async (req, res) => {\r\n    try {\r\n        let { name, email, password, mobile } = req.body;\r\n\r\n        if (!name || !email || !password || !mobile) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { profilePic } = req.files;\r\n\r\n        if (!profilePic) {\r\n            return res.status(400).send({ status: false, message: \"No profile pic uploaded\" });\r\n        };\r\n\r\n        let hashedPassward = await bcrypt.hash(password, 10);\r\n        password = hashedPassward;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let profilePicPath = \"/adminImages/\";\r\n        let profilePicName = uuid.v4() + \".\" + profilePic.name.split(\".\").pop();\r\n        let profilePicFullPath = `http://${currentIpAddress}:${port}${profilePicPath}`;\r\n\r\n        let picSavingPath = path.join(__dirname, \"..\", \"..\", \"adminImages\", profilePicName);\r\n\r\n        profilePic.mv(picSavingPath, (err) => {\r\n            if (err) {\r\n                console.log(err);\r\n            }\r\n        });\r\n\r\n        picObj = {\r\n            picName: profilePicName,\r\n            picPath: profilePicFullPath,\r\n        };\r\n\r\n        let adminObj = {\r\n            adminId: generateRandomAlphaNumericID(26),\r\n            sessionToken: generateRandomAlphaNumericID(51),\r\n            name,\r\n            email,\r\n            password,\r\n            mobile,\r\n            profilePic: picObj,\r\n        };\r\n\r\n        let newAdmin = await adminModel.create(adminObj);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Admin created\",\r\n            data: newAdmin,\r\n        });\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// ADMIN LOGIN\r\nconst adminLogin = async (req, res) => {\r\n    try {\r\n        let { email, password } = req.body;\r\n\r\n        if (!email || !password) {\r\n            return res.status(400).send({ status: false, message: \"Email and password are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ email });\r\n        if (!admin) {\r\n            return res.status(400).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        bcrypt.compare(password, admin.password, function (err, result) {\r\n            if (err) {\r\n                throw err;\r\n            }\r\n            hasAccess(result);\r\n        });\r\n\r\n        async function hasAccess(result) {\r\n            if (result) {\r\n                let data = {};\r\n                let date = Date.now();\r\n                let issueTime = Math.floor(date / 1000);\r\n                let token = jwt.sign(\r\n                    {\r\n                        email: admin.email,\r\n                        adminId: admin._id.toString(),\r\n                        iat: issueTime,\r\n                    },\r\n                    tokenSecretKey,\r\n                    { expiresIn: \"24h\" }\r\n                );\r\n                (data._id = admin._id.toString()), (data.email = email);\r\n                data.token = token;\r\n\r\n                res.setHeader(\"Authorization\", \"Bearer\", token);\r\n\r\n                admin.sessionToken = generateRandomAlphaNumericID(51);\r\n\r\n                await admin.save();\r\n\r\n                return res.status(200).send({\r\n                    status: true,\r\n                    message: \"Successfully login\",\r\n                    data: data,\r\n                });\r\n            } else {\r\n                return res.status(401).send({ status: false, message: \"Login denied\" });\r\n            }\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL BOOKINGS OF AN USER\r\nconst getAllBookingsOfUser = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, userId } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let user = await userModel.findOne({ userId });\r\n\r\n            if (!user) {\r\n                return res.status(404).send({ status: false, message: \"User Not Found\" });\r\n            }\r\n\r\n            let userAllBookings = await bookingModel.find({ userId });\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: userAllBookings,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE DAY REQUESTS\r\nconst getOneDayBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        }\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let date;\r\n            if (req.params.date) {\r\n                date = req.params.date;\r\n            } else {\r\n                let today = new Date(); // Use today's date if no date is provided\r\n                const year = today.getFullYear();\r\n                const month = String(today.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(today.getDate()).padStart(2, \"0\");\r\n\r\n                date = `${year}-${month}-${day}`;\r\n            }\r\n\r\n            let oneDayBookings = await bookingModel.find({ BookingDate: date });\r\n\r\n            let grandTotal = 0;\r\n            for (let booking of oneDayBookings) {\r\n                grandTotal += booking.grand_total;\r\n            };\r\n\r\n            let data = {\r\n                totalBookings: oneDayBookings,\r\n                oneDayRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ONE WEEK REQUESTS\r\nconst getOneWeekBookings = async (req, res) => {\r\n    try {\r\n        let { adminId, sessionToken } = req.params;\r\n\r\n        if (!adminId || !sessionToken) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            let startDate;\r\n            let endDate;\r\n\r\n            if (req.params.startDate && req.params.endDate) {\r\n                startDate = req.params.startDate;\r\n                endDate = req.params.endDate;\r\n            } else {\r\n                const date = new Date();\r\n                const year = date.getFullYear();\r\n                const month = String(date.getMonth() + 1).padStart(2, \"0\"); // Adding 1 because getMonth() returns zero-based month\r\n                const day = String(date.getDate()).padStart(2, \"0\");\r\n\r\n                endDate = `${year}-${month}-${day}`;\r\n\r\n                const oneWeekAgo = new Date(date.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                const startYear = oneWeekAgo.getFullYear();\r\n                const startMonth = String(oneWeekAgo.getMonth() + 1).padStart(2, '0');\r\n                const startDay = String(oneWeekAgo.getDate()).padStart(2, '0');\r\n\r\n                startDate = `${startYear}-${startMonth}-${startDay}`;\r\n            };\r\n\r\n            let oneWeekBookings = await bookingModel.find({\r\n                BookingDate: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneWeekBookings.length) {\r\n                for (let booking of oneWeekBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneWeekBookings: oneWeekBookings,\r\n                grandTotal: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(403).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE MONTH REVENUE AND REQUESTS (ADMIN API)\r\nconst getOneMonthBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, month, year } = req.params;\r\n\r\n        if (!adminId || !sessionToken || !month || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-${month}-01`; // Month is zero-based index\r\n            const endDate = `${year}-${month}-31`;\r\n\r\n            const oneMonthBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n\r\n            if (oneMonthBookings.length) {\r\n                for (let booking of oneMonthBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneMonthBookings: oneMonthBookings,\r\n                oneMonthRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        };\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET ONE YEAR REQUESTS AND REVENUE (ADMIN API);\r\nconst getOneYearBookings = async (req, res) => {\r\n    try {\r\n        const { adminId, sessionToken, year } = req.params;\r\n        if (!adminId || !sessionToken || !year) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let admin = await adminModel.findOne({ adminId, sessionToken });\r\n\r\n        if (!admin) {\r\n            return res.status(404).send({ status: false, message: \"Bad Reques!!!\" });\r\n        };\r\n\r\n        if (admin.adminId === adminId && admin.sessionToken === sessionToken) {\r\n            const startDate = `${year}-01-01`; // January 1st of the provided year\r\n            const endDate = `${year}-12-31`; // December 31st of the provided year\r\n\r\n            let oneYearBookings = await bookingModel.find({\r\n                createdAt: { $gte: startDate, $lte: endDate },\r\n            });\r\n\r\n            let grandTotal = 0;\r\n            if (oneYearBookings.length) {\r\n                for (let booking of oneYearBookings) {\r\n                    grandTotal += booking.grand_total;\r\n                };\r\n            };\r\n\r\n            let data = {\r\n                oneYearRequests: oneYearBookings,\r\n                oneYearRevenue: grandTotal,\r\n            };\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Success\",\r\n                data: data,\r\n            });\r\n        } else {\r\n            return res.status(400).send({ status: false, message: \"Session Expired\" });\r\n        }\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    createAdmin,\r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n};\r\n","const categoryModel = require(\"../models/categoryModel\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require(\"../config/logger.config\");\r\n\r\n// ADD CATEGORY\r\nconst addCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description } = req.body;\r\n\r\n        if (!name || !description) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        };\r\n\r\n        let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n        let decodedData = Buffer.from(File_data, \"base64\");\r\n        // let { category_image } = req.files;\r\n\r\n        let categoryImgFolder = path.join(__dirname, \"..\", \"..\", \"categoryImages\");\r\n\r\n        if (!fs.existsSync(categoryImgFolder)) {\r\n            fs.mkdirSync(categoryImgFolder);\r\n        }\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/categoryImages/\";\r\n        let imgUniqName = uuid.v4() + File_Extension;\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n        fs.writeFileSync(imgSavingPath, decodedData);\r\n        // category_image.mv(imgSavingPath, (err) => {\r\n        //     if (err) throw err;\r\n        // });\r\n\r\n        let imgObj = {\r\n            fileName: imgUniqName,\r\n            filePath: imgFullUrl,\r\n        };\r\n\r\n        let categoryObj = {\r\n            name,\r\n            description,\r\n            category_image: imgObj,\r\n        };\r\n\r\n        let newCategory = await categoryModel.create(categoryObj);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category Added\",\r\n            data: newCategory,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// GET CATEGORY BY CATEGORY ID\r\nconst getCategoryById = async (req, res) => {\r\n    try {\r\n        let { categoryId } = req.params;\r\n\r\n        let category;\r\n        if (categoryId) {\r\n            if (!isValidObjectId(categoryId)) {\r\n                return res.status(400).send({ status: false, message: \"Invalid category Id\"});\r\n            }\r\n            category = await categoryModel.findById(categoryId);\r\n        };\r\n\r\n        if (!category) {\r\n            return res.status(200).send({ status: true, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let allProducts = await productModel.find({ category: category._id });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: category,\r\n            products: allProducts,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getCategoryById API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET CATEGORY BY SERVICE SEARCH {allProductSearchByKeywords}\r\nconst getProductByKeywords  = async (req, res) => {\r\n    try {\r\n        let { service_search } = req.body;\r\n        if (!service_search) {\r\n            return res.status(400).send({ status: false, message: \"Search parameter is required\"});\r\n        };\r\n\r\n        let filter = {\r\n            $or: [\r\n            { name: { $regex: service_search, $options: \"i\" } },\r\n            { subTitle: { $regex: service_search, $options: \"i\" } }, \r\n            { description: { $regex: service_search, $options: \"i\" } }\r\n            ],\r\n        };\r\n\r\n        let products = await productModel.find(filter);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            products: products,\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getProductByKeywords API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CATEGORIES\r\nconst getAllCategories = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let allCategories = await categoryModel.find({});\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCategories,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllCategories API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n// UPDATE CATEGORY BY CATEGORY ID\r\nconst updateCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"Category Id is required\" });\r\n        };\r\n\r\n        if (!isValidObjectId(categoryId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid Category Id\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"Category Not Found\" });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            category.name = reqBody.name;\r\n        };\r\n\r\n        if (\"description\" in reqBody) {\r\n            category.description = reqBody.description;\r\n        };\r\n\r\n        if (\"FileUpload\" in reqBody) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            // console.log(\"reqbody: \", reqBody);\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/categoryImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", imgUniqName);\r\n\r\n            let oldImgName = category.category_image.fileName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"categoryImages\", oldImgName);\r\n            \r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            };\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let newImgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            category.category_image = newImgObj;\r\n        };\r\n\r\n        await category.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category updated successfully\",\r\n            data: category,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE CATEGORY\r\nconst deleteCategory = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n        \r\n        let { categoryId } = req.params;\r\n        if (!categoryId) {\r\n            return res.status(400).send({ status: false, message: \"CategoryId is required\" });\r\n        };\r\n\r\n        let category = await categoryModel.findById(categoryId);\r\n\r\n        if (!category) {\r\n            return res.status(404).send({ status: false, message: \"No category found with this category Id\"})\r\n        };\r\n\r\n        await categoryModel.deleteOne({ _id: categoryId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Category deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteCategory API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addCategory,\r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n};\r\n","const logger = require('../config/logger.config');\r\nconst classScheduleModel = require('../models/classScheduleModel');\r\nconst courseModel = require('../models/courseModel');\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst uuid = require('uuid');\r\n\r\nconst { isValidObjectId } = require('mongoose');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nlet { port, adminSecretKey } = require('../config/config');\r\n\r\n\r\n// CREATE CLASS SCHEDULE\r\nconst createClassSchedule = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Key is required'\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        const {\r\n            courseId,\r\n            course_name,\r\n            meeting_link,\r\n            teacherId,\r\n            techer_name,\r\n            input_text,\r\n            youtube_video_code,\r\n            status\r\n        } = req.body;\r\n\r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let classPdfFolder = path.join(__dirname, \"..\", \"..\", \"class_pdf\");\r\n\r\n            if (!fs.existsSync(classPdfFolder)) {\r\n                fs.mkdirSync(classPdfFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/class_pdf/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        };\r\n\r\n        const classData = {\r\n            courseId,\r\n            course_name,\r\n            meeting_link,\r\n            teacherId,\r\n            techer_name,\r\n            input_text,\r\n            pdf_upload_file: imgObj,\r\n            youtube_video_code,\r\n            status\r\n        };\r\n\r\n        let newSchedule = await classScheduleModel.create(classData);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Class schedule created successfully\",\r\n            data: newSchedule\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in createClassSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CLASS SCHEDULE\r\nconst getAllClassSchedule = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Key is required'\r\n            })\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        const allClassSchedules = await classScheduleModel.find({});\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Class schedule created successfully\",\r\n            data: allClassSchedules\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllClassSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET CLASS SCHEDULE BY COURSE ID\r\nconst getSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId and key are required\" \r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let classSchedule = await classScheduleModel.findById(courseId);\r\n\r\n        if (!classSchedule) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: classSchedule\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE CLASS SCHEDULE\r\nconst updateSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({\r\n                status: false, \r\n                message: \"CourseId and key are required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let s = await classScheduleModel.findById(courseId);\r\n\r\n        if (!s) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        const e = req.body;\r\n\r\n        if (\"course_name\" in e) {\r\n            s.course_name = e.course_name;\r\n        }\r\n\r\n        if (\"meeting_link\" in e) {\r\n            s.meeting_link = e.meeting_link;\r\n        };\r\n\r\n        if (\"techer_name\" in e) {\r\n            s.techer_name = e.techer_name;\r\n        };\r\n\r\n        if (\"input_text\" in e) {\r\n            s.input_text = e.input_text;\r\n        };\r\n\r\n        if (\"youtube_video_code\" in e) {\r\n            s.youtube_video_code = e.youtube_video_code\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            s.status= e.status\r\n        };\r\n\r\n        if (\"FileUpload\" in req.body ) {\r\n\r\n            let oldImgName = s.pdf_upload_file.fileName;\r\n\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/class_pdf/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"class_pdf\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            s.pdf_upload_file = imgObj;\r\n        }\r\n\r\n        await s.save();\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Schedule updated successfully\",\r\n            data: s\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE SCHEDULE\r\nconst deleteSchedule = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"CourseId is required\" \r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid courseId\"\r\n            });\r\n        };\r\n\r\n        let s = await classScheduleModel.findById(courseId);\r\n\r\n        if (!s) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Class schedule not found\" \r\n            });\r\n        };\r\n\r\n        let pdf_file_name = s.pdf_upload_file.fileName;\r\n        if (pdf_file_name) {\r\n            let pdf_file_path = path.join(__dirname, \"..\", \"..\", \"class_pdf\", pdf_file_name);\r\n            if (fs.existsSync(pdf_file_path)) {\r\n                fs.unlinkSync(pdf_file_path);\r\n            }\r\n        };\r\n\r\n        let deleteSchedule = await classScheduleModel.deleteOne({ courseId });\r\n\r\n        if (!deleteSchedule) {\r\n            return res.status(404).send({\r\n                status: false,\r\n                message: \"Schedule not found or alrady deleted\"\r\n            })\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Schedule deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteSchedule API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    createClassSchedule,\r\n    getAllClassSchedule,\r\n    getSchedule,\r\n    updateSchedule,\r\n    deleteSchedule\r\n};","const courseModel = require(\"../models/courseModel\");\r\nconst classScheduleModel = require('../models/classScheduleModel');\r\nconst coursePurchaseModel = require('../models/coursePurchaseModel');\r\nconst userModel = require(\"../models/userModel\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst uuid = require(\"uuid\");\r\nconst logger = require(\"../config/logger.config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nlet { getCurrentIPAddress } = require(\"../uitls/utils\");\r\nlet { port, adminSecretKey } = require(\"../config/config\");\r\n\r\n// ADD COURSE\r\nconst addCourse = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        const { categoryId, category_name, course_name, description, course_fee, duration, start_date, end_date, class_time, course_seat_limit, offer_in_amount, course_type } = req.body;\r\n\r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n            // let { course_image } = req.files;\r\n\r\n            let courseImgFolder = path.join(__dirname, \"..\", \"..\", \"courseImages\");\r\n\r\n            if (!fs.existsSync(courseImgFolder)) {\r\n                fs.mkdirSync(courseImgFolder);\r\n            }\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/courseImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n            // course_image.mv(imgSavingPath, (err) => {\r\n            //     if (err) throw err;\r\n            // });\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        }\r\n\r\n        let courseData = {\r\n            categoryId,\r\n            category_name,\r\n            course_name,\r\n            description,\r\n            course_fee,\r\n            duration,\r\n            start_date,\r\n            end_date,\r\n            class_time,\r\n            course_seat_limit,\r\n            offer_in_amount,\r\n            course_type,\r\n            course_image: imgObj,\r\n        };\r\n\r\n        let newCourse = await courseModel.create(courseData);\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Course created successfully\",\r\n            data: newCourse,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET ALL COURSES\r\nconst getAllCourses = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        let allCourses = await courseModel.find({});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allCourses,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// GET A COURSE BY COURSE ID\r\nconst getCourseById = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        const { courseId } = req.params;\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"CourseId is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid courseId\",\r\n            });\r\n        }\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        }\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: c,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getCourseById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE COURSE BY COURSE ID\r\nconst updateCourse = async (req, res) => {\r\n    try {\r\n        const { key, courseId } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        if (!courseId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"CourseId is required\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid courseId\",\r\n            });\r\n        }\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        }\r\n\r\n        let e = req.body;\r\n\r\n        if (\"category_name\" in e) {\r\n            c.category_name = e.category_name;\r\n        }\r\n\r\n        if (\"course_name\" in e) {\r\n            c.course_name = e.course_name;\r\n        }\r\n\r\n        if (\"description\" in e) {\r\n            c.description = e.description;\r\n        }\r\n\r\n        if (\"course_fee\" in e) {\r\n            c.course_fee = e.course_fee;\r\n        }\r\n\r\n        if (\"duration\" in e) {\r\n            c.duration = e.duration;\r\n        }\r\n\r\n        if (\"start_date\" in e) {\r\n            c.start_date = e.start_date;\r\n        }\r\n\r\n        if (\"end_date\" in e) {\r\n            c.end_date = e.end_date;\r\n        }\r\n\r\n        if (\"class_time\" in e) {\r\n            c.class_time = e.class_time;\r\n        }\r\n\r\n        if (\"course_seat_limit\" in e) {\r\n            c.course_seat_limit = e.course_seat_limit;\r\n        }\r\n\r\n        if (\"offer_in_amount\" in e) {\r\n            c.offer_in_amount = e.offer_in_amount;\r\n        }\r\n\r\n        if (\"course_type\" in e) {\r\n            c.course_type = e.course_type;\r\n        }\r\n\r\n        if (\"FileUpload\" in req.body) {\r\n            let oldImgName = c.course_image.fileName;\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            }\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/courseImages/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            c.course_image = imgObj;\r\n        }\r\n\r\n        await c.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Course updated successfully\",\r\n            data: c,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL CLASSES OF A COURSE\r\nconst getAllClassesOfMyCourse = async (req, res) => {\r\n    try {\r\n        const { userId, courseId } = req.params;\r\n\r\n        if (!userId || !courseId ) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\",\r\n            });\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        let course = await courseModel.findById(courseId);\r\n\r\n        if (!course) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        };\r\n\r\n        let myPurchasedCourse = await coursePurchaseModel.findOne({ userId, courseId });\r\n\r\n        let myPurchasedCourseClasses = await classScheduleModel.find({ courseId: myPurchasedCourse.courseId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"success\",\r\n            data: myPurchasedCourseClasses,\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n// DELETE COURSE BY COURSE ID\r\nconst deleteCourse = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"CourseId and key are required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        if (!isValidObjectId(courseId)) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid courseId\",\r\n            });\r\n        }\r\n\r\n        let c = await courseModel.findById(courseId);\r\n\r\n        if (!c) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course not found\",\r\n            });\r\n        }\r\n\r\n        let oldImgName = c.course_image.fileName;\r\n        if (oldImgName) {\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"courseImages\", oldImgName);\r\n\r\n            if (fs.existsSync(oldImgPath)) {\r\n                fs.unlinkSync(oldImgPath);\r\n            }\r\n        }\r\n\r\n        await courseModel.deleteOne({ _id: courseId });\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: 'Course deleted successfully'\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    addCourse,\r\n    getAllCourses,\r\n    getCourseById,\r\n    updateCourse,\r\n    deleteCourse,\r\n    getAllClassesOfMyCourse\r\n};\r\n","const coursePurchaseModel = require('../models/coursePurchaseModel');\r\nconst userModel = require('../models/userModel');\r\nconst courseModel = require('../models/courseModel');\r\nconst logger = require('../config/logger.config');\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// PURCHASE A COURSE\r\nconst purchaseCourse = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'key is required'\r\n            })\r\n        };\r\n\r\n        // if (key !== adminSecretKey) {\r\n        //     return res.status(400).send({\r\n        //         status: false,\r\n        //         message: 'Not Authorized'\r\n        //     });\r\n        // };\r\n\r\n        let { courseId, amount, status, notes } = req.body;\r\n\r\n        // let user = await userModel.findById(userId);\r\n\r\n        // if (!user) {\r\n        //     return res.status(400).send({\r\n        //         status: false,\r\n        //         message: 'user not found'\r\n        //     });\r\n        // };\r\n\r\n        let purchaseData = {\r\n            courseId,\r\n            amount, \r\n            status, \r\n            userId,\r\n            notes\r\n        };\r\n        let newCouusePurchase = await coursePurchaseModel.create(purchaseData);\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Course purchased successfully\",\r\n            data: newCouusePurchase\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in purchaseCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET A PURCHASED COURSE BY ID\r\nconst getPurchasedCourse = async (req, res) => {\r\n    try {\r\n        const { key, purchaseId } = req.params;\r\n\r\n        if (!key || !purchaseId) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId and key is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        let purchasedCourse = await coursePurchaseModel.findById(purchaseId);\r\n\r\n        if (!purchasedCourse) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Purchased course not found\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: purchasedCourse\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getPurchasedCourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL PURCHASED COURSES BY A STUDENT\r\nconst getMyAllPurchasedCourses = async (req, res) => {\r\n    try {\r\n        const { key, userId } = req.params;\r\n\r\n        if (!userId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"userId and key is required\"\r\n            });\r\n        };\r\n\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let allPurchasedCourses = await coursePurchaseModel.find({userId});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allPurchasedCourses\r\n        });\r\n        \r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllPurchasedCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL PURCHASED COURSES BY A STUDENT\r\nconst getAllPurchasedCourses = async (req, res) => {\r\n    try {\r\n        const { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let allPurchasedCourses = await coursePurchaseModel.find({});\r\n\r\n        let purchaseArr = [];\r\n        for (let purchase of allPurchasedCourses) {\r\n            let user = await userModel.findOne({ userId: purchase.userId });\r\n            let course = await courseModel.findOne({ _id: purchase.courseId });\r\n            let purchaseObj = {\r\n                purchaseDetails: purchase,\r\n                user,\r\n                course,\r\n            };\r\n\r\n            purchaseArr.push(purchaseObj);\r\n        }\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: purchaseArr\r\n        });\r\n        \r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllPurchasedCourses API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL USER LIST THOSE PURCHASED A PARTICULAR COURSE\r\nconst getAllUsersOfACourse = async (req, res) => {\r\n    try {\r\n        const { courseId, key } = req.params;\r\n\r\n        if (!courseId || !key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"All fields are required\"\r\n            });\r\n        };\r\n\r\n        let course = await courseModel.findById(courseId);\r\n\r\n        if (!course) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Course Not Found\"\r\n            });\r\n        };\r\n\r\n        let allPurchasesOfACourse = await coursePurchaseModel.find({ courseId });\r\n\r\n        let userArr = [];\r\n\r\n        for (let ele of allPurchasesOfACourse) {\r\n            let user = await userModel.findOne({ userId: ele.userId });\r\n            userArr.push(user);\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            course,\r\n            users: userArr\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllUsersOfACourse API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\n// UPDATE A PURCHASED COURSE DETAILS\r\nconst updatePurchasedCourseDetails = async (req, res) => {\r\n    try {\r\n        const { purchaseId, key } = req.params;\r\n\r\n        if (!purchaseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId and key is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let p = await coursePurchaseModel.findById(purchaseId);\r\n\r\n        if (!p) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Purchased course not found\"\r\n            });\r\n        };\r\n\r\n        const e = req.body;\r\n\r\n        if (\"amount\" in e) {\r\n            p.amount = e.amount;\r\n        };\r\n\r\n        if (\"status\" in e) {\r\n            p.status = e.status;\r\n        };\r\n\r\n        if (\"notes\" in e) {\r\n            p.notes = e.notes;\r\n        };\r\n\r\n        await p.save();\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Details updated successfully\",\r\n            data: p\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updatePurchasedCourseDetails API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE PURCHASE DETAILS\r\nconst deletePurchaseDetails = async (req, res) => {\r\n    try {\r\n        const { purchaseId, key } = req.params;\r\n\r\n        if (!purchaseId || !key) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"purchaseId and key is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(purchaseId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid purchaseId\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: 'Not Authorized'\r\n            });\r\n        };\r\n\r\n        let deletePurchase = await coursePurchaseModel.deleteOne({ _id: purchaseId });\r\n\r\n        if (!deletePurchase) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Purchase details not found or already deleted\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Purchase details deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deletePurchaseDetails API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = {\r\n    purchaseCourse,\r\n    getPurchasedCourse,\r\n    getAllPurchasedCourses,\r\n    getMyAllPurchasedCourses,\r\n    getAllUsersOfACourse,\r\n    updatePurchasedCourseDetails,\r\n    deletePurchaseDetails\r\n}","const userModel = require(\"../models/userModel\");\r\nconst categoryModel = require(\"../models/categoryModel\");\r\nconst coursePurchaseModel = require(\"../models/coursePurchaseModel\");\r\nconst bannerImageModel = require(\"../models/bannerImageModel\");\r\nconst courseModel = require(\"../models/courseModel\");\r\nconst { getCurrentIPAddress } = require(\"../uitls/utils\");\r\n\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { port, adminSecretKey } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\nconst logger = require('../config/logger.config');\r\n\r\n// DASHBOARD API\r\nconst getDashboard = async (req, res) => {\r\n    try {\r\n        const { key, userId } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Key is required\",\r\n            });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not Authorized\",\r\n            });\r\n        }\r\n\r\n        // let categories = await categoryModel.find({});\r\n\r\n        let myAllPurchasedCourses = null;\r\n        if (userId) {\r\n            myAllPurchasedCourses = await coursePurchaseModel.find({ userId }).populate(\"courseId\");\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        let bannerImages;\r\n        if (bannerObj) {\r\n            bannerImages = bannerObj.bannerImages ? bannerObj.bannerImages : null;\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            bannerImages: bannerImages ? bannerImages : [],\r\n            myAllPurchasedCourses,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ADMIN DASHBOARD\r\nconst getAdminDashboard = async (req, res) => {\r\n    try {\r\n        let allPurchase = await coursePurchaseModel.find({});\r\n\r\n        let sale = 0;\r\n        for (let ele of allPurchase) {\r\n            sale += ele.amount;\r\n        };\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        let bannerImages;\r\n        if (bannerObj) {\r\n            bannerImages = bannerObj.bannerImages ? bannerObj.bannerImages : null;\r\n        };\r\n\r\n        let courses = await courseModel.find({}).countDocuments();\r\n        let user = await userModel.find({}).countDocuments();\r\n\r\n        let report = {\r\n            sale,\r\n            courses,\r\n            user\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            bannerImages: bannerImages ? bannerImages : [],\r\n            report\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in getAdminDashboard API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// UPDATE BANNER IMAGES\r\nconst updateBannerImages = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"Bad Request!!!\" });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        };\r\n\r\n        let bannerObj = await bannerImageModel.findOne({});\r\n\r\n        if (!bannerObj) {\r\n            bannerObj = await bannerImageModel.create({bannerImages: []});\r\n        };\r\n\r\n        let { ImageModel } = req.body;\r\n\r\n        let parsedData = JSON.parse(ImageModel);\r\n\r\n        let bannerImage = req.files.bannerImage;\r\n\r\n        if (!bannerImage) {\r\n            return res.status(400).send({ status: false, message: \"No banner image uploaded\" });\r\n        }\r\n\r\n        let index = parsedData.index; //{\"isNewPick\":false,\"index\":1,\"img_id\":\"64ffebc1f3bfc5d77220193b\",\"imageName\":\"1694493633669-432139964.jpg\"}\r\n        let img_id = parsedData.img_id ? parsedData.img_id : \"\";\r\n        let imageName = parsedData.imageName;\r\n        let isNewPick = parsedData.isNewPick;\r\n\r\n        let currentIpAddress = getCurrentIPAddress();\r\n        let imgRelativePath = \"/bannerImages/\";\r\n        let imgUniqName = uuid.v4() + \".\" + bannerImage.name.split(\".\").pop();\r\n        let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n        let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgUniqName);\r\n\r\n        if (!isNewPick) {\r\n            let oldImage = bannerObj.bannerImages[index].imageName;\r\n            let oldImgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", oldImage);\r\n\r\n            fs.unlinkSync(oldImgPath);\r\n\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let updatedBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages[index] = updatedBannerObj;\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner updated successfully\",\r\n                data: bannerImages,\r\n            });\r\n        } else {\r\n            bannerImage.mv(imgSavingPath, (err) => {\r\n                if (err) throw err;\r\n            });\r\n\r\n            let newBannerObj = {\r\n                imageName: imgUniqName,\r\n                imagePath: imgFullUrl,\r\n            };\r\n\r\n            bannerObj.bannerImages.push(newBannerObj);\r\n\r\n            await bannerObj.save();\r\n\r\n            let bannerImages = bannerObj.bannerImages;\r\n\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Banner added successfully\",\r\n                data: bannerImages,\r\n            });\r\n        }\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in updateBannerImages API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n// DELETE BANNER IMAGE BY ID\r\nconst deleteBannerImage = async (req, res) => {\r\n    try {\r\n        let { imageId, key } = req.params;\r\n        if (!imageId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\" });\r\n        }\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\" });\r\n        }\r\n\r\n        let bannerObj = await bannerImageModel.findOne();\r\n\r\n        if (!bannerObj) {\r\n            return res.status(400).send({ status: false, message: \"Not Found!!!\" });\r\n        }\r\n\r\n        if (bannerObj.bannerImages.length) {\r\n            for (let i = 0; i < bannerObj.bannerImages.length; i++) {\r\n                if (imageId === bannerObj.bannerImages[i]._id.toString()) {\r\n\r\n                    let imgName = bannerObj.bannerImages[i].imageName;\r\n                    let imgPath = path.join(__dirname, \"..\", \"..\", \"bannerImages\", imgName);\r\n\r\n                    if (fs.existsSync(imgPath)) {\r\n                        fs.unlinkSync(imgPath);\r\n                    };\r\n                    \r\n                    let arr = bannerObj.bannerImages;\r\n                    arr.splice(i, 1);\r\n                    bannerObj.bannerImages = arr;\r\n\r\n                    await bannerObj.save();\r\n                }\r\n            }\r\n        }\r\n\r\n        let bannerImages = bannerObj.bannerImages;\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Banner deleted successfully\",\r\n            data: bannerImages,\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n        logger.error(`Error in deleteBannerImage API: ${error.message}`, { meta: metadata });\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\nmodule.exports = {\r\n    getDashboard,\r\n    getAdminDashboard,\r\n    updateBannerImages,\r\n    deleteBannerImage,\r\n};\r\n","const teacherModel = require('../models/teacherModel');\r\n\r\n\r\nconst path = require('path');\r\nconst fs = require('fs');\r\nconst uuid = require('uuid');\r\n\r\nconst { isValidObjectId } = require('mongoose');\r\nlet { getCurrentIPAddress } = require('../uitls/utils');\r\nlet { port, adminSecretKey } = require('../config/config');\r\nconst logger = require('../config/logger.config');\r\n\r\n\r\n// ADD TEACHER\r\nconst addTeacher = async (req, res) => {\r\n    try {\r\n\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let { name, description } = req.body;\r\n        \r\n        let imgObj = null;\r\n        if (\"FileUpload\" in req.body) {\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let teacherImgFolder = path.join(__dirname, \"..\", \"..\", \"uploads\");\r\n\r\n            if (!fs.existsSync(teacherImgFolder)) {\r\n                fs.mkdirSync(teacherImgFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/uploads/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"uploads\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n        }\r\n\r\n        let teacherData = {\r\n            name,\r\n            description,\r\n            profilePic: imgObj\r\n        };\r\n\r\n        let newTeacher = await teacherModel.create(teacherData);\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher added successfully\",\r\n            data: newTeacher\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in addTeacher API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET ALL TEACHERS\r\nconst getAllTeachers = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        let allTeachers = await teacherModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: allTeachers\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getAllTeachers API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET TEACHER BY TEACHER ID\r\nconst getTeacherById = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n        \r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let teacher = await teacherModel.findById(teacherId);\r\n\r\n        if (!teacher) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: teacher\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in getTeacherById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// UPDATE TEACHER BY TEACHER ID\r\nconst updateTeacher = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n\r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let t = await teacherModel.findById(teacherId);\r\n\r\n        if (!t) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        let e = req.body;\r\n\r\n        if (\"name\" in e) {\r\n            t.name = e.name;\r\n        };\r\n\r\n        if (\"description\" in e) {\r\n            t.description = e.description;\r\n        };\r\n\r\n        if ( \"FileUpload\" in e ) {\r\n            let oldImgName = t.profilePic.fileName;\r\n\r\n            if (oldImgName) {\r\n                let oldImgPath = path.join(__dirname, \"..\", \"..\", \"uploads\", oldImgName);\r\n\r\n                if (fs.existsSync(oldImgPath)) {\r\n                    fs.unlinkSync(oldImgPath);\r\n                }\r\n            };\r\n\r\n            let { File_Extension, File_Path, File_data, File_name } = req.body.FileUpload;\r\n\r\n            let decodedData = Buffer.from(File_data, \"base64\");\r\n\r\n            let teacherImgFolder = path.join(__dirname, \"..\", \"..\", \"uploads\");\r\n\r\n            if (!fs.existsSync(teacherImgFolder)) {\r\n                fs.mkdirSync(teacherImgFolder);\r\n            };\r\n\r\n            let currentIpAddress = getCurrentIPAddress();\r\n            let imgRelativePath = \"/uploads/\";\r\n            let imgUniqName = uuid.v4() + File_Extension;\r\n            let imgFullUrl = `http://${currentIpAddress}:${port}${imgRelativePath}`;\r\n            let imgSavingPath = path.join(__dirname, \"..\", \"..\", \"uploads\", imgUniqName);\r\n\r\n            fs.writeFileSync(imgSavingPath, decodedData);\r\n\r\n            let imgObj = {\r\n                fileName: imgUniqName,\r\n                filePath: imgFullUrl,\r\n            };\r\n\r\n            t.profilePic = imgObj;\r\n        };\r\n\r\n        await t.save();\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher data updated successfully\",\r\n            data: t\r\n        });\r\n\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in updateTeacher API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// DELETE TEACHER BY TEACHER ID\r\nconst deleteTeacher = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"key is required\"\r\n            });\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(401).send({\r\n                status: false,\r\n                message: \"Not authorized\"\r\n            });\r\n        };\r\n        \r\n        const { teacherId } = req.params;\r\n        if (!teacherId) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"TeacherId is required\"\r\n            });\r\n        };\r\n\r\n        if (!isValidObjectId(teacherId)) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Invalid teacherId\"\r\n            });\r\n        };\r\n\r\n        let t = await teacherModel.findById(teacherId);\r\n\r\n        if (!t) {\r\n            return res.status(400).send({ \r\n                status: false, \r\n                message: \"Teacher not found\"\r\n            });\r\n        };\r\n\r\n        let oldImgName = t.profilePic.fileName;\r\n        let oldImgPath = path.join(__dirname, \"..\", \"..\", \"uploads\", oldImgName);\r\n\r\n        if (fs.existsSync(oldImgPath)) {\r\n            fs.unlinkSync(oldImgPath);\r\n        };\r\n\r\n        await teacherModel.deleteOne({_id: teacherId});\r\n\r\n        return res.status(201).send({\r\n            status: true,\r\n            message: \"Teacher deleted successfully\",\r\n        });\r\n    } catch (error) {\r\n        let metadata = {\r\n            stack: error.stack,\r\n            details: error.details || \"No additional details provided\",\r\n            timestamp: new Date().toISOString(),\r\n            ip: req.ip,\r\n            method: req.method,\r\n            url: req.originalUrl,\r\n        };\r\n\r\n        logger.error(`Error in deleteTeacherById API: ${error.message}`, { meta: metadata });\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = {\r\n    addTeacher,\r\n    getAllTeachers,\r\n    getTeacherById,\r\n    updateTeacher,\r\n    deleteTeacher\r\n};","const userModel = require(\"../models/userModel\");\r\nconst adminModel = require(\"../models/adminModel\");\r\nconst deletedUserModel = require('../models/deleteUserModel');\r\nconst uuid = require(\"uuid\");\r\nconst path = require(\"path\");\r\nconst fs = require(\"fs\");\r\nconst { getCurrentIPAddress, generateRandomAlphaNumericID } = require(\"../uitls/utils\");\r\nconst { port } = require(\"../config/config\");\r\nconst { isValidObjectId } = require(\"mongoose\");\r\n\r\nconst { adminSecretKey } = require('../config/config');\r\n\r\n\r\n// LOGIN USER\r\nconst authenticateUser = async (req, res) => {\r\n    try {\r\n        let { email, profilePic, name, userId } = req.body;\r\n\r\n        const isUserExists = await userModel.findOne({ userId: userId });\r\n\r\n        if (!isUserExists) {\r\n            let userObj = {\r\n                userId,\r\n                name,\r\n                email,\r\n                profilePic\r\n            };\r\n\r\n            let newUser = await userModel.create(userObj);\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: newUser\r\n            });\r\n        } else {\r\n            return res.status(200).send({\r\n                status: true,\r\n                message: \"Authentication successful\",\r\n                data: isUserExists,\r\n            });\r\n        };\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// REGISTER USER\r\nconst updateUser = async (req, res) => {\r\n    try {\r\n        const { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        let reqBody = req.body;\r\n\r\n        if (\"name\" in reqBody) {\r\n            user.name = reqBody.name;\r\n        };\r\n\r\n        if (\"phone\" in reqBody) {\r\n            user.phone = reqBody.phone;\r\n        };\r\n\r\n        if (\"gender\" in reqBody) {\r\n            user.gender = reqBody.gender;\r\n        };\r\n\r\n        if (\"date_of_birth\" in reqBody) {\r\n            user.date_of_birth = reqBody.date_of_birth;\r\n        };\r\n\r\n        if (\"Address\" in reqBody) {\r\n            if (\"address\" in reqBody.Address) {\r\n                user.Address.address = reqBody.Address.address;\r\n            };\r\n\r\n            if (\"apartment\" in reqBody.Address) {\r\n                user.Address.apartment = reqBody.Address.apartment;\r\n            };\r\n\r\n            if (\"city\" in reqBody.Address) {\r\n                user.Address.city = reqBody.Address.city;\r\n            };\r\n\r\n            if (\"post_code\" in reqBody.Address) {\r\n                user.Address.post_code = reqBody.Address.post_code;\r\n            };\r\n\r\n            if (\"state\" in reqBody.Address) {\r\n                user.Address.state = reqBody.Address.state;\r\n            }\r\n        };\r\n\r\n        if (\"education\" in reqBody) {\r\n            user.education = reqBody.education;\r\n        }\r\n\r\n        await user.save();\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User updated successfully\",\r\n            data: user,\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// GET USER BY ID\r\nconst getUserById = async (req, res) => {\r\n    try {\r\n        let { userId, key } = req.params;\r\n\r\n        if (!userId || !key) {\r\n            return res.status(400).send({ status: false, message: \"All fields are required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: user\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// GET ALL USERS\r\nconst getAllUsers = async (req, res) => {\r\n    try {\r\n        let { key } = req.params;\r\n\r\n        if (!key) {\r\n            return res.status(400).send({ status: false, message: \"key is required\"});\r\n        };\r\n\r\n        if (key !== adminSecretKey) {\r\n            return res.status(403).send({ status: false, message: \"NOT AUTHORIZED!!!\"});\r\n        };\r\n\r\n        let users = await userModel.find({});\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"Success\",\r\n            data: users\r\n        });\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    };\r\n};\r\n\r\n\r\n// DELETE USER\r\nconst deleteUser = async (req, res) => {\r\n    try {\r\n        let { userId } = req.params;\r\n\r\n        if (!userId) {\r\n            return res.status(400).send({ status: false, message: \"userId is required\"});\r\n        };\r\n\r\n        let user = await userModel.findOne({ userId });\r\n\r\n        if (!user) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"User not found\",\r\n            });\r\n        };\r\n\r\n        const { reason, feedback} = req.body;\r\n\r\n        let userAllBookings = await bookingModel.find({ userId });\r\n\r\n        let userData = {\r\n            user,\r\n            userAllBookings\r\n        };\r\n\r\n        let jsonStr = JSON.stringify(userData);\r\n\r\n        await userModel.deleteOne({ userId });\r\n\r\n        let deletedUserData = {\r\n            userId,\r\n            deletedUserData: jsonStr,\r\n            reason,\r\n            feedback,\r\n            deletedAt: new Date().toLocaleString()\r\n        };\r\n\r\n        await deletedUserModel.create(deletedUserData);\r\n\r\n        return res.status(200).send({\r\n            status: true,\r\n            message: \"User deleted successfully\",\r\n        });\r\n\r\n    } catch (error) {\r\n        return res.status(400).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n    authenticateUser,\r\n    updateUser,\r\n    deleteUser,\r\n    getUserById,\r\n    getAllUsers\r\n};\r\n","class BaseError extends Error {\r\n    constructor(name, statusCode, description, details) {\r\n        super(description);\r\n        this.name = name;\r\n        this.statusCode = statusCode;\r\n        this.details = details;\r\n    }\r\n}\r\n\r\nmodule.exports = BaseError;","const { isValidObjectId } = require('mongoose');\r\nconst { tokenSecretKey } = require('../config/config');\r\nconst adminModel = require('../models/adminModel');\r\nconst jwt = require('jsonwebtoken');\r\n\r\n\r\n// AUTHENTICATION\r\nconst Authentication = async (req, res, next) => {\r\n    try {\r\n        let tokenWithBearer = req.headers[\"authorization\"];\r\n\r\n        if (!tokenWithBearer) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Token is required\"\r\n            });\r\n        };\r\n\r\n        let tokenArray = tokenWithBearer.split(\" \");\r\n        let token = tokenArray[1];\r\n\r\n        if (!token) {\r\n            return res.status(400).send({\r\n                status: false,\r\n                message: \"Invalid token\"\r\n            });\r\n        };\r\n\r\n        let decodedToken;\r\n\r\n        jwt.verify(token, tokenSecretKey, (err, decode) => {\r\n            if (err) {\r\n                throw err;\r\n            };\r\n\r\n            decodedToken = decode;\r\n            let loginUserId = decodedToken.adminId;\r\n            req[\"adminId\"] = loginUserId;\r\n            next();\r\n        })\r\n\r\n    } catch (error) {\r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\n// AUTHORIZATION\r\nconst Authorization = async (req, res, next) => {\r\n    try {\r\n        let tokenId = req.adminId;\r\n        let { adminId } = req.params;\r\n\r\n        if (!isValidObjectId(adminId)) {\r\n            return res.status(400).send({ status: false, message: \"Invalid userId\"});\r\n        };\r\n\r\n        let admin = await adminModel.findById(adminId);\r\n\r\n        if (!admin){\r\n            return res.status(404).send({ status: false, message: \"Admin not found\"})\r\n        };\r\n\r\n        let AdminId = admin._id;\r\n\r\n        if ( tokenId.toString() !== AdminId.toString() ) {\r\n            return res.status(403).send({\r\n                status: false,\r\n                message: \"NOT AUTHORIZED!!!\"\r\n            })\r\n        };\r\n\r\n        next();\r\n    } catch (error) {   \r\n        return res.status(500).send({ status: false, message: error.message });\r\n    }\r\n};\r\n\r\n\r\nmodule.exports = { Authentication, Authorization }","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst adminSchema = new mongoose.Schema({\r\n    adminId: {\r\n        type: String,\r\n    },\r\n\r\n    sessionToken: {\r\n        type: String,\r\n    },\r\n\r\n    name: {\r\n        type: String,\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n    },\r\n\r\n    mobile: {\r\n        type: String,\r\n    },\r\n\r\n    profilePic: {\r\n        picName: {\r\n            type: String,\r\n        },\r\n        picPath: {\r\n            type: String,\r\n        }\r\n    },\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Admin\", adminSchema);","const mongoose = require('mongoose');\r\n\r\nconst bannerImageSchema = new mongoose.Schema({\r\n    bannerImages: [\r\n        {\r\n            imageName: { type: String, default: \"\" },\r\n            imagePath: { type: String, default: \"\" }\r\n        }\r\n    ]\r\n}, { timestamps: true });\r\n\r\n\r\nmodule.exports = mongoose.model(\"BannerImage\", bannerImageSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst categorySchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    category_image: {\r\n        fileName: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        filePath: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n\r\n    cat_enum: {\r\n        type: String,\r\n        enum: [\"\", \"\"]\r\n    },\r\n    \r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"Category\", categorySchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst classScheduleSchema = new mongoose.Schema({\r\n    courseId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    meeting_link: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    teacherId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    techer_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    input_text: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    pdf_upload_file: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    youtube_video_code: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Class_Schedule\", classScheduleSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst courseSchema = new mongoose.Schema({\r\n    categoryId: {\r\n        type: ObjectId,\r\n        ref: 'Category'\r\n    },\r\n\r\n    category_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_name: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_fee: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    duration: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    start_date: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    end_date: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    class_time: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    course_image: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    course_seat_limit: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    offer_in_amount: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    course_type: {\r\n        type: String,\r\n        default: \"\"\r\n    }\r\n}, { timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Course\", courseSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst coursePurchaseSchema = new mongoose.Schema({\r\n    \r\n    courseId: {\r\n        type: ObjectId,\r\n        ref: \"Course\"\r\n    },\r\n\r\n    userId: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    amount: {\r\n        type: Number,\r\n        default: 0\r\n    },\r\n\r\n    status: {\r\n        type: String,\r\n        default: \"\"\r\n    },\r\n\r\n    notes: {\r\n        type: String,\r\n        default: \"\"\r\n    }\r\n}, {timestamps: true});\r\n\r\nmodule.exports = mongoose.model(\"CoursePurchase\", coursePurchaseSchema);","const mongoose = require('mongoose');\r\n\r\n\r\nconst deletedUserSchema = new mongoose.Schema({\r\n    userId: {\r\n        type: String,\r\n    },\r\n\r\n    deletedUserData: {\r\n        type: String,\r\n    },\r\n\r\n    reason: {\r\n        type: String,\r\n    },\r\n\r\n    feedback: {\r\n        type: String,\r\n    },\r\n\r\n    deletedAt: {\r\n        type: String,\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"DeletedUser\", deletedUserSchema);","const mongoose = require('mongoose');\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\n\r\nconst teacherSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        default: \"\",\r\n    },\r\n\r\n    profilePic: {\r\n        fileName: { type: String, default: \"\" },\r\n        filePath: { type: String, default: \"\" }\r\n    },\r\n\r\n    description: {\r\n        type: String,\r\n        default: \"\",\r\n    }\r\n}, {timestamps: true});\r\n\r\n\r\nmodule.exports = mongoose.model(\"Teacher\", teacherSchema);","const mongoose = require(\"mongoose\");\r\nconst ObjectId = mongoose.Schema.Types.ObjectId;\r\n\r\nconst userSchema = new mongoose.Schema(\r\n    {\r\n        userId: {\r\n            type: String,\r\n            unique: true,\r\n            default: \"\"\r\n        },\r\n\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n            trim: true,\r\n        },\r\n\r\n        profilePic: {\r\n            type: String,\r\n        },\r\n\r\n        gender: {\r\n            type: String,\r\n            enum: [\"MALE\", \"FEMALE\", \"OTHER\", \"UNDEFINED\"],\r\n            default: \"UNDEFINED\",\r\n        },\r\n\r\n        Address: {\r\n            address: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            apartment: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            city: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            post_code: {\r\n                type: String,\r\n                default: \"\"\r\n            },\r\n\r\n            state: {\r\n                type: String,\r\n                default: \"\"\r\n            }\r\n        },\r\n\r\n        email: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        phone: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        date_of_birth: {\r\n            type: String,\r\n            default: \"\"\r\n        },\r\n\r\n        education: {\r\n            type: String,\r\n            default: \"\"\r\n        }\r\n    },\r\n    { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"User\", userSchema);\r\n","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createAdmin, \r\n    adminLogin,\r\n    getAllBookingsOfUser,\r\n} = require('../../controllers/adminController');\r\n\r\nconst { Authentication, Authorization } = require('../../middlewares/auth');\r\n\r\n// SIGNUP ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/createSuperAdmin\", createAdmin);\r\n\r\n// LOGIN ADMIN/CONSULTANT\r\nrouter.post(\"/api/v1/loginSuperAdmin\", adminLogin);\r\n\r\n// GET ONE DAY BOOKINGS (ADMIN API) // date format: 2024-05-02\r\n// router.get(\"/api/v1/getOneDayBookings/:adminId/:sessionToken/:date?\", getOneDayBookings);\r\n\r\n// GET ONE WEEK BOOKINGS (ADMIN API)\r\n// router.get(\"/api/v1/getOneWeekBookings/:adminId/:sessionToken/:startDate?/:endDate?\", getOneWeekBookings);\r\n\r\n// GET ONE MONTH BOOKINGS (ADMIN API)\r\n// router.get(\"/api/v1/getOneMonthBookings/:adminId/:sessionToken/:month/:year\", getOneMonthBookings);\r\n\r\n// GET ONE YEAR BOOKINGS (ADMIN API)\r\n// router.get(\"/api/v1/getOneYearBookings/:adminId/:sessionToken/:year\", getOneYearBookings);\r\n\r\n// GET ALL BOOKINGS OF AN USER (ADMIN API)\r\nrouter.get(\"/api/v1/getUserAllBookings/:adminId/:sessionToken/:userId\", getAllBookingsOfUser);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCategory, \r\n    getCategoryById,\r\n    getProductByKeywords,\r\n    getAllCategories,\r\n    updateCategory,\r\n    deleteCategory,\r\n } = require('../../controllers/categoryController');\r\n\r\n// ADD CATEGORY\r\nrouter.post(\"/api/v1/addCategory/:key\", addCategory);\r\n\r\n// GET CATEGORY BY ID\r\nrouter.post(\"/api/v1/viewService/:categoryId\", getCategoryById);\r\n\r\n// SEARCH PRODUCTS BY KEYWORDS\r\nrouter.post(\"/api/v1/allProductSearchByKeywords\", getProductByKeywords);\r\n\r\n// GET ALL CATEGORIES\r\nrouter.get(\"/api/v1/getAllCategories/:key\", getAllCategories);\r\n\r\n// UPDATE CATEGORY\r\nrouter.put(\"/api/v1/updateCategory/:key/:categoryId\", updateCategory);\r\n\r\n// DELETE CATEGORY\r\nrouter.delete(\"/api/v1/deleteCategory/:key/:categoryId\", deleteCategory);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addCourse,\r\n    getAllCourses,\r\n    updateCourse,\r\n    deleteCourse,\r\n    getCourseById,\r\n    getAllClassesOfMyCourse\r\n} = require('../../controllers/courseController');\r\n\r\n// ADD COURSE\r\nrouter.post(\"/api/v1/addCourse/:key\", addCourse);\r\n\r\n// GET COURSE BY ID\r\nrouter.get(\"/api/v1/getCourse/:key/:courseId\", getCourseById);\r\n\r\n// GET ALL COURSES\r\nrouter.get(\"/api/v1/getAllCourses/:key\", getAllCourses);\r\n\r\n// UPDATE COURSE BY COURSE ID\r\nrouter.put(\"/api/v1/updateCourse/:key/:courseId\", updateCourse);\r\n\r\n// DELETE COURSE BY COURSE ID\r\nrouter.delete(\"/api/v1/deleteCourse/:key/:courseId\", deleteCourse);\r\n\r\n// GET MY PURCHASED COURSE'S ALL CLASS SCHEDULE\r\nrouter.get(\"/api/v1/getAllClassesOfMyCourse/:userId/:courseId\", getAllClassesOfMyCourse);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { getDashboard, updateBannerImages, deleteBannerImage, getAdminDashboard } = require('../../controllers/dashboard');\r\n\r\n// GET DASHBOARD\r\nrouter.get(\"/api/v1/getDashboard/:key/:userId?\", getDashboard);\r\n\r\n// GET ADMIN DASHBOARD\r\nrouter.get(\"/api/v1/getAdminDashboard/:key\", getAdminDashboard);\r\n\r\n// ADD/UPDATE BANNER IMAGES\r\nrouter.put(\"/api/v1/addOrUpdateBanner/:key\", updateBannerImages);\r\n\r\n// DELETE BANNER IMAGE\r\nrouter.delete(\"/api/v1/deleteBanner/:imageId/:key\", deleteBannerImage);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    purchaseCourse,\r\n    getPurchasedCourse,\r\n    getAllPurchasedCourses,\r\n    updatePurchasedCourseDetails,\r\n    deletePurchaseDetails,\r\n    getMyAllPurchasedCourses,\r\n    getAllUsersOfACourse\r\n} = require('../../controllers/coursePurchaseController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/addPurchaseDetails/:userId\", purchaseCourse);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getPurchasedDetails/:key/:purchaseId\", getPurchasedCourse);\r\n\r\n// GET MY ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getMyAllPurchasedDetails/:key/:userId\", getMyAllPurchasedCourses);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllPurchasedDetails/:key\", getAllPurchasedCourses);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updatePurchasedDetails/:key/:purchaseId\", updatePurchasedCourseDetails);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletePurchaseDetails/:key/:purchaseId\", deletePurchaseDetails);\r\n\r\n// GET ALL USER LIST THOSE PURCHASED A PARTICULAR COURSE\r\nrouter.get(\"/api/v1/getAllUsersOfACourse/:key/:courseId\", getAllUsersOfACourse);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    createClassSchedule, \r\n    getAllClassSchedule,\r\n    getSchedule,\r\n    updateSchedule,\r\n    deleteSchedule,\r\n\r\n} = require('../../controllers/classScheduleController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/createSchedule/:key\", createClassSchedule);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getSchedule/:key/:courseId\", getSchedule);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllClassSchedule/:key\", getAllClassSchedule);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updateSchedule/:key/:courseId\", updateSchedule);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletSchedule/:key/:courseId\", deleteSchedule);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst { \r\n    addTeacher,\r\n    getAllTeachers,\r\n    getTeacherById,\r\n    updateTeacher,\r\n    deleteTeacher,\r\n\r\n} = require('../../controllers/teacherController');\r\n\r\n// ADD COURSE PURCHASE DETAILS\r\nrouter.post(\"/api/v1/addTeacher/:key\", addTeacher);\r\n\r\n// GET COURSE PURCHASE DETAILS BY ID\r\nrouter.get(\"/api/v1/getTeacher/:key/:teacherId\", getTeacherById);\r\n\r\n// GET ALL COURSE PURCHASE DETAILS\r\nrouter.get(\"/api/v1/getAllTeachers/:key\", getAllTeachers);\r\n\r\n// UPDATE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.put(\"/api/v1/updateTeacher/:key/:teacherId\", updateTeacher);\r\n\r\n// DELETE COURSE PURCHASE DETAILS BY PURCHASE ID\r\nrouter.delete(\"/api/v1/deletTeacher/:key/:teacherId\", deleteTeacher);\r\n\r\n\r\nmodule.exports = router;","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {\r\n    authenticateUser,\r\n    updateUser,\r\n    getAllUsers,\r\n    getUserById,\r\n    deleteUser, \r\n    \r\n} = require('../../controllers/userController');\r\n\r\n// AUTHENTICATE USER\r\nrouter.post(\"/api/v1/authenticateUser\", authenticateUser);\r\n\r\n// GET USER BY ID\r\nrouter.get(\"/api/v1/getUser/:userId/:key\", getUserById);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/users/:key\", getAllUsers);\r\n\r\n// REGISTER USER\r\nrouter.post(\"/api/v1/updateUser/:userId\", updateUser);\r\n\r\n// DELETE USER BY USER ID\r\nrouter.delete(\"/api/v1/deleteUser/:userId\", deleteUser);\r\n\r\n// GET ALL USERS\r\nrouter.get(\"/api/v1/getAllUsers\", getAllUsers);\r\n\r\n\r\nmodule.exports = router;","const BaseError = require('../errors/base.error');\r\nconst { StatusCodes } = require('http-status-codes');\r\n\r\nfunction errorHandler(err, req, res, next) {\r\n    if (err instanceof BaseError) {\r\n        return res.status(err.statusCode).json({\r\n            success: false,\r\n            message: err.message,\r\n            err: err.details,\r\n            data: {}\r\n        });\r\n    };\r\n\r\n    return res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({\r\n        success: false,\r\n        message: \"Something went wrong\",\r\n        err: err,\r\n        data: {}\r\n    });\r\n};\r\n\r\nmodule.exports = { errorHandler };","const os = require(\"os\");\r\n\r\n// GET CURRENT IP ADDRESS\r\nlet getCurrentIPAddress = () => {\r\n    let networkInterfaces = os.networkInterfaces();\r\n    let ipAddress = Object.values(networkInterfaces)\r\n        .flat()\r\n        .filter((iface) => iface.family === \"IPv4\" && !iface.internal)\r\n        .map((iface) => iface.address)[0];\r\n    return ipAddress;\r\n};\r\n\r\n// Generate Random AlphaNumeric ID of given length\r\nfunction generateRandomAlphaNumericID(length) {\r\n    let id = \"\";\r\n    const characters = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n\r\n    for (let i = 0; i < length; i++) {\r\n        const randomIndex = Math.floor(Math.random() * characters.length);\r\n        id += characters[randomIndex];\r\n    }\r\n    return id;\r\n};\r\n\r\nmodule.exports = {\r\n    getCurrentIPAddress,\r\n    generateRandomAlphaNumericID,\r\n};\r\n","module.exports = require(\"bcrypt\");","module.exports = require(\"body-parser\");","module.exports = require(\"compression\");","module.exports = require(\"cors\");","module.exports = require(\"dotenv\");","module.exports = require(\"express\");","module.exports = require(\"express-fileupload\");","module.exports = require(\"express-mongo-sanitize\");","module.exports = require(\"helmet\");","module.exports = require(\"hpp\");","module.exports = require(\"http-status-codes\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"mongoose\");","module.exports = require(\"uuid\");","module.exports = require(\"winston\");","module.exports = require(\"winston-mongodb\");","module.exports = require(\"fs\");","module.exports = require(\"os\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const express = require('express');\r\nconst bodyParser = require('body-parser');\r\nconst fileUpload = require('express-fileupload');\r\nconst cors = require(\"cors\");\r\nconst helmet = require('helmet');\r\n// const rateLimit = require('express-rate-limit');\r\nconst compression = require('compression');\r\n// const xss = require('xss');\r\nconst mongoSanitize = require('express-mongo-sanitize');\r\nconst hpp = require('hpp');\r\n\r\n\r\nconst { port } = require('./src/config/config');\r\nconst { connectToDatabase } = require('./src/config/db.config');\r\nconst { errorHandler } = require('./src/uitls/errorHandler');\r\n\r\nconst app = express();\r\n\r\napp.use(helmet());\r\napp.use(cors());\r\napp.use(compression());\r\n// app.use(xss());\r\napp.use(mongoSanitize());\r\napp.use(hpp()); // HTTP Parameter Pollution prevention\r\napp.use(express.json({ limit: \"50mb\" }));\r\napp.use(express.urlencoded({ extended: true, limit: \"50mb\" }));\r\napp.use(bodyParser.json({ limit: \"50mb\" }));\r\napp.use(bodyParser.text());\r\napp.use(fileUpload());\r\napp.use(cors());\r\n\r\nconst adminRoutes = require('./src/routes/v1/adminRoutes');\r\nconst courseRoutes = require('./src/routes/v1/courseRoutes');\r\nconst userRoutes = require('./src/routes/v1/userRoutes');\r\nconst categoryRoutes = require('./src/routes/v1/categoryRoutes');\r\nconst dashboardRoutes = require(\"./src/routes/v1/dashboardRoutes\");\r\nconst purchaseRoutes = require(\"./src/routes/v1/purchaseRoutes\");\r\nconst scheduleRoutes = require('./src/routes/v1/scheduleRoutes');\r\nconst teacherRoutes = require('./src/routes/v1/teacherRoutes');\r\n\r\n// Content Security Policy\r\napp.use(\r\n    helmet.contentSecurityPolicy({\r\n        directives: {\r\n            defaultSrc: [\"'self'\"],\r\n            scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\r\n            objectSrc: [\"'none'\"],\r\n            upgradeInsecureRequests: [],\r\n        },\r\n    })\r\n);\r\n\r\n// HTTP Strict Transport Security (HSTS)\r\napp.use(\r\n    helmet.hsts({\r\n        maxAge: 31536000, // 1 year\r\n        includeSubDomains: true,\r\n        preload: true,\r\n    })\r\n);\r\n\r\napp.use(\"/userImages\", express.static(__dirname + \"/userImages\"));\r\napp.use(\"/productImages\", express.static(__dirname + \"/productImages\"));\r\napp.use(\"/categoryImages\", express.static(__dirname + \"/categoryImages/\"));\r\napp.use(\"/superdealImages\", express.static(__dirname + \"/superdealImages\"));\r\napp.use(\"/bannerImages\", express.static(__dirname + \"/bannerImages\"));\r\napp.use(\"/courseImages\", express.static(__dirname + \"/courseImages\"));\r\napp.use(\"/class_pdf\", express.static(__dirname + \"/class_pdf\"));\r\napp.use(\"/uploads\", express.static(__dirname + \"/uploads\"));\r\n\r\n\r\napp.use(\"/\", adminRoutes);\r\napp.use(\"/\", courseRoutes);\r\napp.use(\"/\", userRoutes);\r\napp.use(\"/\", categoryRoutes);\r\napp.use(\"/\", dashboardRoutes);\r\napp.use(\"/\", purchaseRoutes);\r\napp.use(\"/\", scheduleRoutes);\r\napp.use(\"/\", teacherRoutes);\r\n\r\napp.get(\"/\", (req, res) => {\r\n    res.send(\"<h1>Coaching App is Up and Running</h1>\");\r\n});\r\n\r\n// Last middleware if any error comes\r\napp.use(errorHandler);\r\n\r\nconst server = app.listen(port, async() => {\r\n    console.log('App is running on port', port);\r\n    // logger.info('Server started on port ' + port, { meta: { timestamp: new Date().toISOString() } });\r\n    await connectToDatabase;\r\n});\r\n\r\n// Handling unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n    console.error('Unhandled Rejection at:', promise, 'reason:', reason);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling uncaught exceptions\r\nprocess.on('uncaughtException', (err) => {\r\n    console.error('Uncaught Exception thrown:', err);\r\n    // Close the server and exit the process\r\n    server.close(() => {\r\n        process.exit(1);\r\n    });\r\n});\r\n\r\n// Handling process termination signals for graceful shutdown\r\nprocess.on('SIGTERM', () => {\r\n    console.log('SIGTERM signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n\r\nprocess.on('SIGINT', () => {\r\n    console.log('SIGINT signal received: closing HTTP server');\r\n    server.close(() => {\r\n        console.log('HTTP server closed');\r\n        process.exit(0);\r\n    });\r\n});\r\n"],"names":["config","module","exports","mongoDbUrl","process","env","MONGO_DB_URL","logDbUrl","LOG_DB_URL","tokenSecretKey","JWT_SECRET","port","PORT","adminSecretKey","ADMIN_SECRET_KEY","mongoose","connect","maxPoolSize","connectToDatabase","connection","on","console","error","bind","once","log","winston","allowedTransports","push","transports","File","filename","logger","createLogger","format","combine","timestamp","printf","level","toUpperCase","message","meta","JSON","stringify","defaultMeta","service","adminModel","jwt","bcrypt","uuid","path","getCurrentIPAddress","generateRandomAlphaNumericID","userModel","createAdmin","async","req","res","name","email","password","mobile","body","status","send","profilePic","files","hash","currentIpAddress","profilePicPath","profilePicName","v4","split","pop","profilePicFullPath","picSavingPath","join","__dirname","mv","err","picObj","picName","picPath","adminObj","adminId","sessionToken","newAdmin","create","data","adminLogin","admin","findOne","compare","result","date","Date","now","issueTime","Math","floor","token","sign","_id","toString","iat","expiresIn","setHeader","save","hasAccess","getAllBookingsOfUser","userId","params","userAllBookings","bookingModel","find","categoryModel","fs","isValidObjectId","addCategory","key","description","File_Extension","File_Path","File_data","File_name","FileUpload","decodedData","Buffer","from","categoryImgFolder","existsSync","mkdirSync","imgRelativePath","imgUniqName","imgFullUrl","imgSavingPath","writeFileSync","categoryObj","category_image","fileName","filePath","newCategory","metadata","stack","details","toISOString","ip","method","url","originalUrl","getCategoryById","category","categoryId","findById","allProducts","productModel","products","getProductByKeywords","service_search","filter","$or","$regex","$options","subTitle","getAllCategories","allCategories","updateCategory","reqBody","oldImgName","oldImgPath","unlinkSync","newImgObj","deleteCategory","deleteOne","classScheduleModel","createClassSchedule","courseId","course_name","meeting_link","teacherId","techer_name","input_text","youtube_video_code","imgObj","classPdfFolder","classData","pdf_upload_file","newSchedule","getAllClassSchedule","allClassSchedules","getSchedule","classSchedule","updateSchedule","s","e","deleteSchedule","pdf_file_name","pdf_file_path","courseModel","coursePurchaseModel","addCourse","category_name","course_fee","duration","start_date","end_date","class_time","course_seat_limit","offer_in_amount","course_type","courseImgFolder","courseData","course_image","newCourse","getAllCourses","allCourses","getCourseById","c","updateCourse","deleteCourse","getAllClassesOfMyCourse","myPurchasedCourse","myPurchasedCourseClasses","purchaseCourse","amount","notes","purchaseData","newCouusePurchase","getPurchasedCourse","purchaseId","purchasedCourse","getAllPurchasedCourses","allPurchasedCourses","purchaseArr","purchase","purchaseObj","purchaseDetails","user","course","getMyAllPurchasedCourses","getAllUsersOfACourse","allPurchasesOfACourse","userArr","ele","users","updatePurchasedCourseDetails","p","deletePurchaseDetails","bannerImageModel","getDashboard","myAllPurchasedCourses","populate","bannerImages","bannerObj","getAdminDashboard","allPurchase","sale","report","courses","countDocuments","updateBannerImages","ImageModel","parsedData","parse","bannerImage","index","isNewPick","img_id","imageName","newBannerObj","imagePath","oldImage","updatedBannerObj","deleteBannerImage","imageId","length","i","imgName","imgPath","arr","splice","teacherModel","addTeacher","teacherImgFolder","teacherData","newTeacher","getAllTeachers","allTeachers","getTeacherById","teacher","updateTeacher","t","deleteTeacher","deletedUserModel","authenticateUser","isUserExists","userObj","newUser","updateUser","phone","gender","date_of_birth","Address","address","apartment","city","post_code","state","education","deleteUser","reason","feedback","userData","jsonStr","deletedUserData","deletedAt","toLocaleString","getUserById","getAllUsers","BaseError","Error","constructor","statusCode","super","this","Authentication","next","tokenWithBearer","headers","decodedToken","verify","decode","loginUserId","Authorization","tokenId","AdminId","adminSchema","Schema","Types","ObjectId","type","String","timestamps","model","bannerImageSchema","default","categorySchema","cat_enum","enum","classScheduleSchema","courseSchema","ref","Number","coursePurchaseSchema","deletedUserSchema","teacherSchema","userSchema","unique","required","trim","router","Router","post","get","put","delete","StatusCodes","errorHandler","json","success","INTERNAL_SERVER_ERROR","os","networkInterfaces","Object","values","flat","iface","family","internal","map","id","characters","random","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","express","bodyParser","fileUpload","cors","helmet","compression","mongoSanitize","hpp","app","use","limit","urlencoded","extended","text","adminRoutes","courseRoutes","userRoutes","categoryRoutes","dashboardRoutes","purchaseRoutes","scheduleRoutes","teacherRoutes","contentSecurityPolicy","directives","defaultSrc","scriptSrc","objectSrc","upgradeInsecureRequests","hsts","maxAge","includeSubDomains","preload","static","server","listen","promise","close","exit"],"sourceRoot":""}
>>>>>>> b774b28b6bf842c34e531255a43f3b9a04a93b0c
